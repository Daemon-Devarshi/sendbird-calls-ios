#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import PushKit;
@import WebRTC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SendBirdCalls",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class SBCCallOptions;

/// Parameter for accepting incoming call from another user. Contains initial configurations for the call.
SWIFT_CLASS_NAMED("AcceptParams")
@interface SBCAcceptParams : NSObject
/// Options for the call.
@property (nonatomic, strong) SBCCallOptions * _Nonnull callOptions;
/// \param callOptions Call Options for configuring the incoming call. Default value is <code>CallOptions()</code> with only audio call capability.
///
- (nonnull instancetype)initWithCallOptions:(SBCCallOptions * _Nonnull)callOptions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Configuration for authentication of SendBird user.
SWIFT_CLASS_NAMED("AuthenticateParams")
@interface SBCAuthenticateParams : NSObject
/// User Id of the user.
@property (nonatomic, copy) NSString * _Nonnull userId;
/// Access Token used for extra layer of security.
@property (nonatomic, copy) NSString * _Nullable accessToken;
/// Push Token for receiving push notifications from the device.
@property (nonatomic, readonly, copy) NSData * _Nullable voipPushToken;
/// Bool value indicating whether the Push token should be unique to the user. If the value is true, SendBird server will remove the push token from other devices of the authenticated user.
@property (nonatomic, readonly) BOOL unique;
@property (nonatomic, readonly, copy) NSData * _Nullable pushToken SWIFT_DEPRECATED_MSG("This variable is deprecated. Use `voipPushToken`. This will be removed from version 1.0");
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId accessToken:(NSString * _Nullable)accessToken pushToken:(NSData * _Nonnull)pushToken unique:(BOOL)unique OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("This initializer is deprecated. Use `init(userId:accessToken:voipPushToken:unique:)`. This will be removed from version 1.0");
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: User Id of the user.
///   </li>
///   <li>
///     accessToken: Access Token used for extra layer of security.
///   </li>
///   <li>
///     pushToken: Push Token for receiving push notifications from the device. Default value is nil.
///   </li>
///   <li>
///     unique: Bool value indicating whether the Push token should be unique to the user. Default value is false.
///   </li>
/// </ul>
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId accessToken:(NSString * _Nullable)accessToken voipPushToken:(NSData * _Nullable)voipPushToken unique:(BOOL)unique OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId accessToken:(NSString * _Nullable)accessToken;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId pushToken:(NSData * _Nonnull)pushToken unique:(BOOL)unique SWIFT_DEPRECATED_MSG("This initializer is deprecated. Use `init(userId:voipPushToken:unique):`. This will be removed from version 1.0");
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId voipPushToken:(NSData * _Nullable)voipPushToken unique:(BOOL)unique;
/// Add push token to authenticate params.
/// \param token Push Token for receiving push notifications from the device. Default value is nil.
///
/// \param unique Bool value indicating whether the Push token should be unique to the user. Default value is false.
///
- (void)setPushWithToken:(NSData * _Nullable)token withUniqueness:(BOOL)unique SWIFT_DEPRECATED_MSG("This method is deprecated. Use `setVoIPPush(token:withUniqueness:)`. This will be removed from version 1.0");
- (void)setVoIPPushWithToken:(NSData * _Nullable)token withUniqueness:(BOOL)unique;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBCVideoView;

/// Options for configuring the call.
SWIFT_CLASS_NAMED("CallOptions")
@interface SBCCallOptions : NSObject
/// Shows local user’s screen.
@property (nonatomic, weak) SBCVideoView * _Nullable localVideoView;
/// Shows remote user’s screen.
@property (nonatomic, weak) SBCVideoView * _Nullable remoteVideoView;
/// If <code>false</code>, the call is for audio only.
/// //
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://dial(to:isVideoCall:callOptions:completionHandler:)">dial(to:isVideoCall:callOptions:completionHandler:)</a>
///   </li>
/// </ul>
@property (nonatomic) BOOL isVideoCall SWIFT_DEPRECATED_MSG("DO NOT use this property. This property is deprecated.");
/// Bool value indicating whether the call will start with audio. If the value if <code>false</code>, the call will start without audio.
@property (nonatomic) BOOL isAudioEnabled;
@property (nonatomic) BOOL isVideoEnabled;
/// Sets up voice call options. <code>isVideoEnabled</code> has <code>false</code> as a value.
/// \param isAudioEnabled Bool value indicating whether the call starts with audio. The default value is <code>true</code>.
///
- (nonnull instancetype)initWithAudioEnabled:(BOOL)isAudioEnabled;
/// \param isAudioEnabled <code>Bool</code> object assigned <code>true</code> as a default value.
///
/// \param isVideoEnabled <code>Bool</code> object assigned <code>true</code> as a default value.
///
/// \param localVideoView <code>SendBirdVideoView</code> object to show local video. Default value is <code>nil</code>
///
/// \param remoteVideoView <code>SendBirdVideoView</code> object to show remote video. Default value is <code>nil</code>
///
- (nonnull instancetype)initWithAudioEnabled:(BOOL)isAudioEnabled videoEnabled:(BOOL)isVideoEnabled localVideoView:(SBCVideoView * _Nullable)localVideoView remoteVideoView:(SBCVideoView * _Nullable)remoteVideoView OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBCCallOptions (SWIFT_EXTENSION(SendBirdCalls)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// Parameter for dialing another user. Contains initial configurations for the call.
SWIFT_CLASS_NAMED("DialParams")
@interface SBCDialParams : NSObject
/// User Id of the callee to be called.
@property (nonatomic, copy) NSString * _Nonnull calleeId;
/// <code>Bool</code> value indicating whether the call supports vieo call. The default value is <code>false</code>.
@property (nonatomic) BOOL isVideoCall;
/// Options for the call.
@property (nonatomic, strong) SBCCallOptions * _Nonnull callOptions;
/// Custom items for the call.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull customItems;
/// \param calleeId The callee’s user ID
///
/// \param isVideoCall <code>Bool</code> value indicating whether the call supports vieo call. The default value is <code>false</code>.
///
/// \param callOptions Call options for configuring the outgoing call. The default value is <code>CallOptions()</code> with only audio call capability.
///
/// \param customItems Custom items for the call. The default value is empty dictionary.
///
- (nonnull instancetype)initWithCalleeId:(NSString * _Nonnull)calleeId isVideoCall:(BOOL)isVideoCall callOptions:(SBCCallOptions * _Nonnull)callOptions customItems:(NSDictionary<NSString *, NSString *> * _Nonnull)customItems OBJC_DESIGNATED_INITIALIZER;
/// \param calleeId The callee’s user ID
///
- (nonnull instancetype)initWithCalleeId:(NSString * _Nonnull)calleeId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBCDialParams (SWIFT_EXTENSION(SendBirdCalls)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

@class SBCDirectCallUser;
enum SBCDirectCallUserRole : NSInteger;
enum SBCDirectCallEndResult : NSInteger;
@protocol SBCDirectCallDelegate;

/// DirectCall class for a call between two participants. Every call is identified with a unique key.
SWIFT_CLASS_NAMED("DirectCall")
@interface SBCDirectCall : NSObject
/// Call ID of the call. This value is generated from our SendBird server and is <code>String</code> representation of a UUID
@property (nonatomic, readonly, copy) NSString * _Nonnull callId;
/// The UUID form of callId. Useful when dealing with CallKit.
@property (nonatomic, readonly, copy) NSUUID * _Nullable callUUID;
/// The caller object.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable caller;
/// The callee object.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable callee;
/// Custom items of the DirectCall.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull customItems;
/// The remote user of the call.
/// \code
/// guard let remoteUser = self.call.remoteUser else { return }
/// self.remoteUserIdLabel.text = remoteUser.userId
///
/// \endcode
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable remoteUser;
/// The local user of the call.
/// \code
/// guard let localUser = self.call.localUser else { return }
/// self.localUserIdLabel.text = localUser.userId
///
/// \endcode
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable localUser;
/// The role of the current user.
@property (nonatomic, readonly) enum SBCDirectCallUserRole myRole;
/// End Result of the ended call.
@property (nonatomic, readonly) enum SBCDirectCallEndResult endResult;
/// Boolean value indicating whether the call has ended.
@property (nonatomic, readonly) BOOL isEnded;
/// The start time of call. Int64 of miliseconds.
/// important:
///
/// Returns 0 if the call hasn’t started.
@property (nonatomic, readonly) int64_t startedAt;
/// The ended time of call. Int64 of miliseconds.
/// important:
///
/// Returns 0 if the call hasn’t ended.
@property (nonatomic, readonly) int64_t endedAt;
/// The duration of the call. Int64 of miliseconds.
/// important:
///
/// Returns 0 if the call hasn’t started.
@property (nonatomic, readonly) int64_t duration;
/// The audio status of the remote user.
@property (nonatomic, readonly) BOOL isRemoteAudioEnabled;
/// The audio status of the local user.
@property (nonatomic, readonly) BOOL isLocalAudioEnabled;
/// The local <code>SendBirdVideoView</code>. This is a read-only property. If you want to update value, use <a href="x-source-tag://updateLocalVideo(_:)">updateLocalVideo(_:)</a>
/// <ul>
///   <li>
///     See Also:
///     <ul>
///       <li>
///         <a href="x-source-tag://updateLocalVideo(_:)">updateLocalVideo(_:)</a>
///       </li>
///       <li>
///         <a href="x-source-tag://SendBirdVideoView">SendBirdVideoView</a>
///       </li>
///     </ul>
///   </li>
/// </ul>
@property (nonatomic, readonly, weak) SBCVideoView * _Nullable localVideoView;
/// <ul>
///   <li>
///     See Also:
///     <ul>
///       <li>
///         <a href="x-source-tag://updateLocalVideo(_:)">updateRemoteVideo(_:)</a>
///       </li>
///       <li>
///         <a href="x-source-tag://SendBirdVideoView">SendBirdVideoView</a>
///       </li>
///     </ul>
///   </li>
/// </ul>
@property (nonatomic, readonly, weak) SBCVideoView * _Nullable remoteVideoView;
/// The diplaying status of the local user.
@property (nonatomic, readonly) BOOL isLocalVideoEnabled;
/// The displaying staus of the remote user.
@property (nonatomic, readonly) BOOL isRemoteVideoEnabled;
/// Boolean value indicating whether the call supports video call. If <code>false</code>, the call is for audio only. The default value is <code>false</code>.
@property (nonatomic, readonly) BOOL isVideoCall;
/// <code>DirectCallDelegate</code> for this call. DirectCall will notify this delegate for any call-specific events.
/// \code
/// call.delegate?.someMethod()
///
/// \endcode
@property (nonatomic, weak) id <SBCDirectCallDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// User Role of Direct Call
/// <ul>
///   <li>
///     Cases:
///     <ul>
///       <li>
///         caller: The user who made the call.
///       </li>
///       <li>
///         callee: The user who received the call.
///       </li>
///     </ul>
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, SBCDirectCallUserRole, "UserRole", open) {
  SBCDirectCallUserRoleCaller = 0,
  SBCDirectCallUserRoleCallee = 1,
};


@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// Updates local <code>SendBirdVideoView</code>
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://SendBirdVideoView">SendBirdVideoView</a>
///   </li>
/// </ul>
/// \code
///
///
/// \endcode\param view <code>SendBirdVideoView</code> object.
///
- (void)updateLocalVideoView:(SBCVideoView * _Nonnull)videoView;
/// Updates remote <code>SendBirdVideoView</code>
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://SendBirdVideoView">SendBirdVideoView</a>
///   </li>
/// </ul>
/// \param view <code>SendBirdVideoView</code> object.
///
- (void)updateRemoteVideoView:(SBCVideoView * _Nonnull)videoView;
@end



@class SBCError;

@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// Requests <code>ACCEPT</code> to <em>SendBird</em> server and sets up Turn credential. This method is called when the callee accepts incoming call.
/// <ul>
///   <li>
///     See Also: use <a href="x-source-tag://accept(with:)">accept(with:)</a> instead
///   </li>
/// </ul>
/// \param callOptions Set up the call that you’re receiving. Cannot be empty
///
- (void)acceptWithCallOptions:(SBCCallOptions * _Nonnull)callOptions SWIFT_DEPRECATED_MSG("This method is deprecated. Use accept(with:completionHandler:) instead. This will be removed from version 0.8");
/// Accepts the incoming direct call. SendBirdCalls will continue to process the call with the server.
/// \param params Set up the call that you’re receiving. Cannot be empty
///
- (void)acceptWithParams:(SBCAcceptParams * _Nonnull)params;
/// Ends the call. <code>DirectCallDelegate.didEnd(call:)</code> delegate method will be called after successful ending. This delegate will also be called when the remote user ends the call.
/// \code
/// // End a call
/// call.end();
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didEnd(_ call: DirectCall) {
///         //
///     }
///     ...
/// }
///
/// \endcode
- (void)end;
/// Mutes the audio of local user. Will trigger <code>DirectCallDelegate.didRemoteAudioSettingsChange()</code> delegate method of the remote user. If the remote user changes their audio settings, local user will be notified via same delegate method.
/// \code
/// // mute my microphone
/// call.muteMicrophone();
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteAudioSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteAudioEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcode
- (void)muteMicrophone;
/// Unmutes the audio of local user. Will trigger <code>DirectCallDelegate.didRemoteAudioSettingsChange()</code> delegate method of the remote user. If the remote user changes their audio settings, local user will be notified via same delegate method.
/// \code
/// // unmute my microphone
/// call.unmuteMicrophone();
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteAudioSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteAudioEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcode
- (void)unmuteMicrophone;
/// Starts local video. If the callee changes video settings, the caller is notified via the <code>DirectCallDelegate.didRemoteVideoSettingsChange()</code> delegate.
/// \code
/// // Start my local video
/// call.startVideo()
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteVideoSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteVideoEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcode
- (void)startVideo;
/// Stops local video. If the callee changes video settings, the caller is notified via the <code>DirectCallDelegate.didRemoteVideoSettingsChange()</code> delegate.
/// \code
/// // Stop my local video
/// call.stopVideo()
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteVideoSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteVideoEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcode
- (void)stopVideo;
/// Updates custom items of the call.
/// \param customItems Custom items of [String: String] to be updated or inserted.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
- (void)updateCustomItemsWithCustomItems:(NSDictionary<NSString *, NSString *> * _Nonnull)customItems completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes custom items of the call.
/// \param customItemKeys Keys of the custom item that you want to delete.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
- (void)deleteCustomItemsWithCustomItemKeys:(NSArray<NSString *> * _Nonnull)customItemKeys completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes all custom items of the call.
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
- (void)deleteAllCustomItemsWithCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
@end







@class AVAudioSession;
@class AVAudioSessionRouteDescription;

/// DirectCallDelegate methods are invoked along the flow of the call. You <em>should</em> implement the delegate methods to adjust your app according to the changes to the states of the call.
/// \code
/// override func viewDidLoad() {
///    // ...
///    call.delegate = self
/// }
///
/// // ...
///
/// \endcode
SWIFT_PROTOCOL_NAMED("DirectCallDelegate")
@protocol SBCDirectCallDelegate
@optional
/// Called when the callee has accepted the call, but not yet connected to media streams.
- (void)didEstablish:(SBCDirectCall * _Nonnull)call;
@required
/// Called when media streams between the caller and callee are connected and audio/video is enabled.
/// \code
/// func didConnect(_ call: DirectCall) {
///    self.endButton.isEnabled = true
/// }
///
/// \endcode
- (void)didConnect:(SBCDirectCall * _Nonnull)call;
@optional
/// Called when DirectCall begins attempting to reconnect to the server after losing connection.
- (void)didStartReconnecting:(SBCDirectCall * _Nonnull)call;
/// Called when DirectCall successfully reconnects to the server.
- (void)didReconnect:(SBCDirectCall * _Nonnull)call;
/// Called when the remote user changes audio settings.
/// \code
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteAudioSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteAudioEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcode
- (void)didRemoteAudioSettingsChange:(SBCDirectCall * _Nonnull)call;
/// Called when the peer changes video settings.
- (void)didRemoteVideoSettingsChange:(SBCDirectCall * _Nonnull)call;
@required
/// Called when the call has ended.
/// \code
/// func didEnd(_ call: DirectCall) {
///    self.dismiss(animated: true, completion: nil)
/// }
///
/// \endcode
- (void)didEnd:(SBCDirectCall * _Nonnull)call;
@optional
/// Called when the audio device has been changed. To change audio route, see <a href="x-source-tag://routePickerView(frame:)">routePickerView(frame:)</a>
/// \code
/// func didAudioDeviceChange(_ call: DirectCall, session: AVAudioSession, previousRoute: AVAudioSessionRouteDescription, reason: AVAudioSession.RouteChangeReason) {
///    // You can get current audio I/O, available inputs from the session. You can also set preferred input.
///    
///    let currentRoute = session.currentRoute
///    let outputs = currentRoute.outputs
///    let inputs = currentRoute.inputs
///
///    // Update your UI according to the changes to the audio devices, such as external speaker, bluetooth, and built-in speaker.
/// }
///
/// \endcode<ul>
///   <li>
///     See Also:
///     <ul>
///       <li>
///         <a href="x-source-tag://routePickerView(frame:)">routePickerView(frame:)</a>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param call <code>DirectCall</code> object
///
/// \param session A shared instance of <code>AVAudiosession</code>. You can get a current audio route containing inputs and outputs descriptions.
///
/// \param previousRoute A previous audio route.
///
/// \param reason The reason of system audio change.
///
- (void)didAudioDeviceChange:(SBCDirectCall * _Nonnull)call session:(AVAudioSession * _Nonnull)session previousRoute:(AVAudioSessionRouteDescription * _Nonnull)previousRoute reason:(AVAudioSessionRouteChangeReason)reason;
/// Called when the custom items of the call are updated.
/// \param call DirectCall that has updated custom items.
///
/// \param updatedKeys keys that have updated.
///
- (void)didUpdateCustomItemsWithCall:(SBCDirectCall * _Nonnull)call updatedKeys:(NSArray<NSString *> * _Nonnull)updatedKeys;
/// Called when the custom items of the call are deleted.
/// \param call DirectCall that has deleted custom items.
///
/// \param deletedKeys keys that have deleted.
///
- (void)didDeleteCustomItemsWithCall:(SBCDirectCall * _Nonnull)call deletedKeys:(NSArray<NSString *> * _Nonnull)deletedKeys;
@end

/// End results for DirectCall. Indicates reasons for failure or completion. Value for an ongoing call is <code>none</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, SBCDirectCallEndResult, "DirectCallEndResult", open) {
/// Default value of the EndResult.
  SBCDirectCallEndResultNone = 0,
/// The call has ended by either the caller or callee after successful connection.
  SBCDirectCallEndResultCompleted = 1,
/// The caller has canceled the call before the callee accepts or declines.
  SBCDirectCallEndResultCanceled = 2,
/// The callee has declined the call.
  SBCDirectCallEndResultDeclined = 3,
/// The call is accepted on one of the callee’s other devices. All the other devices will receive this call result.
  SBCDirectCallEndResultOtherDeviceAccepted = 4,
/// SendBird server failed to establish a media session between the caller and callee within a specific period of time.
  SBCDirectCallEndResultTimedOut = 5,
/// Data streaming from either the caller or the callee has stopped due to a WebRTC connection issue while calling.
  SBCDirectCallEndResultConnectionLost = 6,
/// The callee hasn’t either accepted or declined the call for a specific period of time.
  SBCDirectCallEndResultNoAnswer = 7,
/// The dial() method of the call has failed.
  SBCDirectCallEndResultDialFailed = 8,
/// The accept() method of the call has failed.
  SBCDirectCallEndResultAcceptFailed = 9,
  SBCDirectCallEndResultUnknown = 10,
};


/// Direct Call Log containing information about a direct call.
SWIFT_CLASS_NAMED("DirectCallLog")
@interface SBCDirectCallLog : NSObject
/// Call Id of the Call
@property (nonatomic, readonly, copy) NSString * _Nonnull callId;
/// The started time of the Call. Int64 of miliseconds.
@property (nonatomic, readonly) int64_t startedAt;
/// The ended time of the Call. Int64 of miliseconds.
@property (nonatomic, readonly) int64_t endedAt;
/// The duration of the Call. Int64 of miliseconds.
@property (nonatomic, readonly) int64_t duration;
/// DirectCallUser that ended the call.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable endedBy;
/// The caller of the call.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable caller;
/// The callee of the call.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable callee;
/// The end result of the call.
@property (nonatomic, readonly) enum SBCDirectCallEndResult endResult;
/// The role of the current user in the call.
@property (nonatomic, readonly) enum SBCDirectCallUserRole myRole;
/// A boolean value indicating whether the call is video call.
@property (nonatomic, readonly) BOOL isVideoCall;
/// Custom items of DirectCallLog instance.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull customItems;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



enum UserRoleFilter : NSInteger;
@class NSArray;

/// A user’s call history is available via a <code>DirectCallLogListQuery</code> instance.
/// \code
/// let params = DirectCallLogListQuery.Params()
/// let query = SendBirdCall.createDirectCallLogListQuery(with: params)
///
/// query.next(completionHandler: { callLogs, error in
///     //
/// }
///
/// \endcode
SWIFT_CLASS_NAMED("DirectCallLogListQuery")
@interface SBCDirectCallLogListQuery : NSObject
/// If <code>true</code>, call history is being retrieved from SendBirdCall server. The default value is <code>false</code>
@property (nonatomic, readonly) BOOL isLoading;
/// If <code>true</code>, there is more call history to be retrieved. The default value is <code>true</code>.
@property (nonatomic, readonly) BOOL hasNext;
/// Returns call logs of the specified role. For example, <code>setMyRole(Callee)</code> returns only the callee’s call logs.
@property (nonatomic, readonly) enum UserRoleFilter myRole;
@property (nonatomic, readonly, strong) NSArray * _Nonnull endResultsArray;
/// The number of call logs to return at once. This is read-only property. If you want to set the limit, see <a href="x-source-tag://limit">Param.limit</a>
/// note:
/// The maximum value is 100 and the minimum is 1.
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://limit">Param.limit</a>
///   </li>
/// </ul>
@property (nonatomic, readonly) int32_t limit;
/// Used to query call history from SendBirdCall server.
- (void)nextWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBCDirectCallLog *> * _Nullable, SBCError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Filter for DirectCallLogListQuery of specific type of user in a call.
/// <ul>
///   <li>
///     Cases:
///     <ul>
///       <li>
///         caller: Caller in a call.
///       </li>
///       <li>
///         callee: Callee in a call.
///       </li>
///       <li>
///         all: all users.
///       </li>
///     </ul>
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, UserRoleFilter, open) {
  UserRoleFilterCaller = 0,
  UserRoleFilterCallee = 1,
  UserRoleFilterAll = 2,
};


/// \code
/// let params = DirectCallLogListQuery.Params()
/// let query = SendBirdCall.createDirectCallLogListQuery(with: params)
/// query.next(completionHandler: { callLogs, error in
///     //
/// }
///
/// \endcode
SWIFT_CLASS_NAMED("Params")
@interface SBCDirectCallLogListQueryParams : NSObject
@property (nonatomic) enum UserRoleFilter myRole;
@property (nonatomic, readonly, strong) NSArray * _Nonnull endResultsArray;
- (void)addEndResult:(enum SBCDirectCallEndResult)endResult;
- (void)removeEndResult:(enum SBCDirectCallEndResult)endResult;
/// Specifies the number of call logs to return at once.
/// note:
/// The maximum value is 100 and the minimum is 1.
@property (nonatomic) int32_t limit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class for SendBirdCalls User.
SWIFT_CLASS_NAMED("User")
@interface SBCUser : NSObject
/// The user ID of the call user.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// The nickname of the user.
@property (nonatomic, readonly, copy) NSString * _Nullable nickname;
/// The profile image URL of the user.
@property (nonatomic, readonly, copy) NSString * _Nullable profileURL;
/// Metadata of the user.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
/// Activity status of the user. If it is <code>false</code>, the user is offline.
/// <ul>
///   <li>
///     Default: <code>false</code>
///   </li>
/// </ul>
@property (nonatomic, readonly) BOOL isActive;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DirectCallUser")
@interface SBCDirectCallUser : SBCUser
/// Shows whether the user is caller or callee.
@property (nonatomic, readonly) enum SBCDirectCallUserRole role;
@end





@class NSCoder;

/// Custom Error class for SendBirdCalls. Subclass of NSError.
SWIFT_CLASS("_TtC13SendBirdCalls8SBCError")
@interface SBCError : NSError
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Custom Error codes representing different error scenarios.
typedef SWIFT_ENUM_NAMED(NSInteger, SBCErrorCode, "ErrorCode", open) {
  SBCErrorCodeDialCanceled = 1800100,
  SBCErrorCodeMyUserIdNotAllowed = 1800101,
  SBCErrorCodeRequestFailed = 1800200,
  SBCErrorCodeWebsocketConnectionNotOpened = 1800201,
  SBCErrorCodeWebsocketConnectionFailed = 1800202,
  SBCErrorCodeNoResponseDueToTimeout = 1800203,
  SBCErrorCodeRequestFailedDueToWebsocketConnectionLost = 1800204,
  SBCErrorCodeWrongResponse = 1800205,
  SBCErrorCodeQueryInProgress = 1800206,
  SBCErrorCodeInternalServerError = 1800207,
  SBCErrorCodeMalformedData = 1800208,
  SBCErrorCodeInvalidParameterValue = 1800300,
  SBCErrorCodeInvalidParameterType = 1800301,
  SBCErrorCodeInstanceNotInitialized = 1800302,
  SBCErrorCodeNotAuthenticated = 1800303,
};


SWIFT_PROTOCOL("_TtP13SendBirdCalls14SBCLogReceiver_")
@protocol SBCLogReceiver
/// Delegate method to be called when new log is generated. You have to implement this method to use the logs in your app.
/// \code
/// var logs: [String] = []
///
/// func log(message: String) {
///    self.logs.append(message)
///    self.updateLogsView()
/// }
///
/// func updateLogsView() {
///    // ...
/// }
///
/// \endcode
- (void)logMessage:(NSString * _Nonnull)message;
@end


SWIFT_CLASS("_TtC13SendBirdCalls9SBCLogger")
@interface SBCLogger : NSObject
/// Adds receiver to receive logs from SendBirdCall Logger
/// \code
/// override func viewDidLoad() {
///    // ...
///    
///    SBCLogger.add(receiver: self)
/// }
///
/// \endcode\param receiver The object inheritted<code>SBCLogReceiver</code> to receive logs
///
+ (void)addWithReceiver:(id <SBCLogReceiver> _Nonnull)receiver;
/// Removes receiver added before.
/// \code
/// SBCLogger.remove(receiver: self)
///
/// \endcode\param receiver The object inheritted<code>SBCLogReceiver</code>
///
+ (void)removeWithReceiver:(id <SBCLogReceiver> _Nonnull)receiver;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;
@protocol SBCSendBirdCallDelegate;
@class PKPushRegistry;
@class PKPushPayload;

SWIFT_CLASS_NAMED("SendBirdCall")
@interface SBCSendBirdCall : NSObject
/// The app id of your SendBirdCalls application. Configure the app id using <a href="x-source-tag://configure(appId:)">configure(appId:)</a>. This is get-only property.
/// important:
/// If you change the app ID, a previous configured app ID will be removed and all calls will be canceled.
/// \code
/// SendBirdCall.appId    // "Optional(YOUR_APP_ID)"
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable appId;)
+ (NSString * _Nullable)appId SWIFT_WARN_UNUSED_RESULT;
/// Initiate <code>SendBirdCall</code> instance when a client app is launched. If another initialization with another <code>APP_ID</code> takes place, all existing data will be deleted and the <code>SendBirdCall</code> instance will be initialized with the new <code>APP_ID</code>.
/// \code
/// SendBirdCall.configure(appId: "YOUR_APP_ID")
///
/// \endcode\param appId Your own app ID from your dashboard
///
///
/// returns:
/// (Discardable)<code>Bool</code> value. If the paramter has an empty string or equal previous app ID, it returns <code>false</code>.
/// If the method configures app ID successfully, it returns <code>true</code>.
+ (BOOL)configureWithAppId:(NSString * _Nonnull)appId;
/// SendBirdCalls SDK Version
/// \code
/// self.versionLabel.text = "SendBirdCalls v\(SendBirdCall.sdkVersion)"
///
/// // "SendBirdCalls v1.0.0"
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Provides a view that allows user to change the system audio route. Returns <a href="https://developer.apple.com/documentation/avkit/avroutepickerview">AVRoutePickerView</a> in iOS 11 or later and <a href="https://developer.apple.com/documentation/mediaplayer/mpvolumeview">MPVolumeView</a> in earlier iOS version.
/// \code
/// let routePickerView = SendBirdCall.routePickerView(frame: frame)
/// self.parentView.addSubView(routePickerView)
///
/// \endcode<ul>
///   <li>
///     Customization
///   </li>
/// </ul>
/// \code
/// if #available(iOS 11.0, *) {
///    guard let routePickerView = routePickerView as? AVRoutePickerView else { return }
///    // Set up AVRoutePickerView
/// } else {
///    guard let routePickerView = routePickerView as? MPVolumeView else { return }
///    // Set up MPVolumeView
/// }
///
///
///
/// \endcode<ul>
///   <li>
///     See Also:
///     <ul>
///       <li>
///         <a href="https://developer.apple.com/documentation/mediaplayer/mpvolumeview">MPVolumeView</a>
///       </li>
///       <li>
///         <a href="https://developer.apple.com/documentation/avkit/avroutepickerview">AVRoutePickerView</a>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param frame <code>CGRect</code> value that is assigned to view’s frame.
///
///
/// returns:
///
/// <a href="https://developer.apple.com/documentation/avkit/avroutepickerview">AVRoutePickerView</a> in iOS 11.0 or later. (<a href="https://developer.apple.com/documentation/mediaplayer/mpvolumeview">MPVolumeView</a>  in previous iOS version)
+ (UIView * _Nonnull)routePickerViewWithFrame:(CGRect)frame SWIFT_WARN_UNUSED_RESULT;
/// Specifies the queue that you want to use for callbacks and delegate methods
/// \param queue DispatchQueue that will be used when callbacks and delegates are called.
///
+ (void)executeOnQueue:(dispatch_queue_t _Nonnull)queue;
/// Registers a device-specific <code>SendBirdCallDelegate </code>event handler. Responding to device-wide events (e.g. incoming calls) is then managed as shown below:
/// \code
/// SendBirdCall.addDelegate(self, identifier: UNIQUE_HANDLER_ID)
///
/// func didStartRinging(_ call: DirectCall) {
///     call.delegate = self
/// }
///
/// \endcode\param delegate SendBirdCallDelegate that listens to SendBirdCall events
///
/// \param identifier Identifier for the specific delegate
///
+ (void)addDelegate:(id <SBCSendBirdCallDelegate> _Nonnull)delegate identifier:(NSString * _Nonnull)identifier;
/// Removes delegate for the given identifier.
/// \param identifier String identifier for the delegate. If SendBirdCall doesn’t have the given identifier, it will be ignored.
///
+ (void)removeDelegateWithIdentifier:(NSString * _Nonnull)identifier;
/// Removes all delegate for SendBirdCall events.
+ (void)removeAllDelegates;
/// Returns call for call ID.
/// \param forCallId Call ID.
///
///
/// returns:
///
/// <code>DirectCall</code> object with corresponding call ID. It can be <code>nil</code>.
+ (SBCDirectCall * _Nullable)getCallForCallId:(NSString * _Nonnull)callId SWIFT_WARN_UNUSED_RESULT;
/// Returns the currently authenticated user.
///
/// returns:
///
/// User that is currently authenticated. Returns nil if no user exists.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBCUser * _Nullable currentUser;)
+ (SBCUser * _Nullable)currentUser SWIFT_WARN_UNUSED_RESULT;
/// Authenticates user with user ID and access token that you generated at SendBird Dashboard.  In order to make and receive calls, authenticate the user with SendBird server with the the <code>SendBirdCall.authenticate() </code>method.
/// \code
/// let params = AuthenticateParams(userId: userId, accessToken: accessToken)
///
/// SendBirdCall.authenticate(with: params) { user, error in
///     guard let user = user, error == nil else {
///         return
///     }
/// }
///
/// \endcode\param params <code>AuthenticateParams</code> that contains User Id, Access Token, Push Token, and Unique
///
/// \param completionHandler The handler to call when the authenication is complete.
///
+ (void)authenticateWithParams:(SBCAuthenticateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBCUser * _Nullable, SBCError * _Nullable))completionHandler;
+ (void)deauthenticateWithPushToken:(NSData * _Nullable)pushToken completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("This method is deprecated. Use `deauthenticate(voipPushToken:, completionHandler:)`. This will be removed from version 1.0");
/// Deauthenticates user. If you call the method without push token, you can keep receiving calls even if the application is terminated or is in background. If you don’t want to receive VoIP push notification anymore, you have to pass the VoIP push token of the device.
/// \code
/// class MyClass {
///     func signOut() {
///         SendBirdCall.deauthenticate(voipPushToken: myVoIPPushToken) { error in
///             guard error == nil else {
///                 // handle error
///                 return
///             }
///
///             // ...
///         }
///     }
/// }
///
/// \endcode\param voipPushToken Data of Push Token. Nullable. Doesn’t remove push token if the token is <code>nil</code>
///
/// \param completionHandler Error Handler to be called after deauthenticate process is finished
///
+ (void)deauthenticateWithVoIPPushToken:(NSData * _Nullable)voipPushToken completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// This method will be removed in v0.8.0
/// <ul>
///   <li>
///     See Also: use <a href="x-source-tag://dial(with:completionHandler:)">dial(with:completionHandler:)</a> instead
///   </li>
/// </ul>
+ (SBCDirectCall * _Nullable)dialTo:(NSString * _Nonnull)calleeId callOptions:(SBCCallOptions * _Nonnull)callOptions completionHandler:(void (^ _Nonnull)(SBCDirectCall * _Nullable, SBCError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("This method is deprecated. Use dial(with:completionHandler:) instead. This will be removed from version 0.8");
/// This method will be removed in v0.8.0
/// <ul>
///   <li>
///     See Also: use <a href="x-source-tag://dial(with:completionHandler:)">dial(with:completionHandler:)</a> instead
///   </li>
/// </ul>
+ (SBCDirectCall * _Nullable)dialTo:(NSString * _Nonnull)calleeId isVideoCall:(BOOL)isVideoCall callOptions:(SBCCallOptions * _Nonnull)callOptions completionHandler:(void (^ _Nonnull)(SBCDirectCall * _Nullable, SBCError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("This method is deprecated. Use dial(with:completionHandler:) instead. This will be removed from version 0.8");
/// Makes a call to user(callee) directly. (1:1 Call).  Use the <code>CallOptions</code> object to choose initial call configuration (e.g. muted/unmuted)
/// \code
/// let params = DialParams(calleeId: CALLEE_ID, callOptions: CallOptions())
///
/// let directCall = SendBirdCall.dial(with: params) { directCall, error in
///     //
/// }
///
/// directCall.delegate = self
///
/// \endcode\param params <code>DialParams</code> that contains calleeId, videoCall flag, CallOptions, and customItems.
///
/// \param completionHandler Callback completionHandler to be called after dialing.
///
///
/// returns:
/// (Discardable) <code>DirectCall</code> object. If the method failed to make a call, it would return <code>nil</code>.
+ (SBCDirectCall * _Nullable)dialWithParams:(SBCDialParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBCDirectCall * _Nullable, SBCError * _Nullable))completionHandler;
/// Handles incoming VoIP push with SendBirdCalls payload. Incoming calls are received either via the application’s persistent internal server connection, or (if the application is in the background) via PushKit. PushKit messages received by the SendBirdCall instance <em>MUST</em> be delivered to the SDK.
/// \code
/// class MyClass: PKPushRegistryDelegate {
///     func pushRegistry(_ registry: PKPushRegistry, didReceiveIncomingPushWith payload: PKPushPayload, for type: PKPushType, completion: @escaping () -> Void) {
///         SendBirdCall.pushRegistry(registry, didReceiveIncomingPushWith: payload, for: type) { uuid in
///       
///             // IMPORTANT: You MUST report incoming call to CallKit when you receive a pushkit push.
///             let provider = CXProvider(configuration: CXProviderConfiguration)
///             let update = CXCallUpdate()
///             update.remoteHandle = CXHandle(type: .generic, value: HANDLE_VALUE)
///             provider.reportNewIncomingCall(with: uuid, update: update) { error in
///                 completion()
///             })
///         }
///     }
/// }
///
/// \endcode\param registry <code>PKPushRegistry</code> object same as  <code>PKPushRegistryDelegate</code> registry.
///
/// \param payload <code>PKPushPayload</code> in incoming VoIP push notification.
///
/// \param type <code>PKPushType</code> of push(<code>VoIP</code>)
///
/// \param completionHandler This closure is invoked with <code>UUID</code> from the payload.
///
+ (void)pushRegistry:(PKPushRegistry * _Nonnull)registry didReceiveIncomingPushWith:(PKPushPayload * _Nonnull)payload for:(PKPushType _Nonnull)type completionHandler:(void (^ _Nullable)(NSUUID * _Nullable))completionHandler;
/// This method will be removed in v1.0.0
/// <ul>
///   <li>
///     See Also: use <a href="x-source-tag://registerVoIPPush(token:unique:completionHandler:)">registerVoIPPush(token:unique:completionHandler:)</a> instead
///   </li>
/// </ul>
+ (void)registerWithPushToken:(NSData * _Nullable)pushToken unique:(BOOL)unique completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("This method is deprecated. Use `registerVoIPPush(token:unique:completionHandler:)`. This will be removed from version 1.0");
/// To receive calls while an app is in the background or closed, a device registration token must be registered to the server. Register a device push token during authentication by either providing it as a parameter in the <code>SendBirdCall.authenticate()</code> method, or after authentication has completed using the <code>SendBirdCall.registerVoIPPushToken()</code> method.
/// \code
/// // PKPushRegistryDelegate
/// class AppDelegate: PKPushRegistryDelegate {
///    func voipRegistration() {
///        self.voipRegistry = PKPushRegistry(queue: DispatchQueue.main)
///        self.voipRegistry?.delegate = self
///        self.voipRegistry?.desiredPushTypes = [.voIP]
///    }
///
///    ...
///    func pushRegistry(_ registry: PKPushRegistry, didUpdate pushCredentials: PKPushCredentials, for type: PKPushType) {
///        SendBirdCall.registerVoIPPush(token: pushCredentials.token, unique: true) { (error) in
///            guard let error = error else {
///                return
///            }
///            // The Push Token has been registered successfully
///        }
///    }
///    ...
/// }
///
/// \endcode\param voipPushToken <code>Data</code> object from <code>pushCredential.token</code>.  Refer to <code>PKPushRegistryDelegate</code>
///
/// \param unique If it is false, you can register more token for multi devices. It has <code>false</code> as a default value.
///
+ (void)registerVoIPPushWithToken:(NSData * _Nullable)token unique:(BOOL)unique completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// This method will be removed in v1.0.0
/// <ul>
///   <li>
///     See Also: use <a href="x-source-tag://unregisterVoIPPush(token:completionHandler:)">unregisterVoIPPush(token:completionHandler:)</a> instead
///   </li>
/// </ul>
+ (void)unregisterWithPushToken:(NSData * _Nullable)pushToken completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("This method is deprecated. Use `unregisterVoIPPush(token:completionHandler:)`. This will be removed from version 1.0");
/// Unregisters a push token of specific device. You will not receive VoIP push notification for a call anymore.   If you don’t want to receive a call in all of the devices of the users, call <code>unregisterAllVoIPPushTokens(completionHandler:)</code>.
/// \code
/// func removeVoIPPushToken() {
///     SendBirdCall.unregisterVoIPPush(token: myVoIPPushToken) { error in
///     guard error == nil else { return }
///     // Unregistered successfully
/// }
///
/// \endcode\param voipPushToken Optional Data for the push token that you want to unregister
///
/// \param completionHandler ErrorHandler that returns callback with error.
///
+ (void)unregisterVoIPPushWithToken:(NSData * _Nullable)token completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// This method will be removed in v1.0
/// <ul>
///   <li>
///     See Also: use <a href="x-source-tag://unregisterAllVoIPPushTokens(completionHandler:)">unregisterAllVoIPPushTokens(completionHandler:)</a> instead
///   </li>
/// </ul>
+ (void)unregisterAllPushTokensWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("This method is deprecated. Use `unregisterAllVoIPPushTokens(completionHandler:)`. This will be removed from version 1.0");
/// Unregister all push token registered to the current user(multi device).  You will not receive a call in all of the devices of the users.
/// \code
/// func removeAllOfVoIPPushTokens() {
///     func unregisterAllVoIPPushTokens(completionHandler: ErrorHandler?) {
///         guard error == nil else { return }
///         // Unregistered all push tokens successfully
///     }
/// }
///
/// \endcode\param completionHandler ErrorHandler that returns callback with error
///
+ (void)unregisterAllVoIPPushTokensWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Creates a Direct Call Log List Query from given params.
/// \param params DirectCallLogListQuery Params with options for creating query.
///
///
/// returns:
///
/// DirectCallLogListQuery: Returns optional query object. Returns nil if current user does not exit.
+ (SBCDirectCallLogListQuery * _Nullable)createDirectCallLogListQueryWithParams:(SBCDirectCallLogListQueryParams * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
/// Updates custom items for a given call Id.
/// \param callId Call ID.
///
/// \param customItems Custom items of [String: String] to be updated or inserted.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
+ (void)updateCustomItemsWithCallId:(NSString * _Nonnull)callId customItems:(NSDictionary<NSString *, NSString *> * _Nonnull)customItems completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes custom items for a given call Id.
/// \param callId Call ID.
///
/// \param customItemKeys Keys of custom items that you want to delete.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
+ (void)deleteCustomItemsWithCallId:(NSString * _Nonnull)callId customItemKeys:(NSArray<NSString *> * _Nonnull)customItemKeys completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes all custom items for a given call Id.
/// \param callId Call ID.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
+ (void)deleteAllCustomItemsWithCallId:(NSString * _Nonnull)callId completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBCSendBirdCall (SWIFT_EXTENSION(SendBirdCalls))
/// Returns call for a given UUID. Returns nil if such call doesn’t exist.
+ (SBCDirectCall * _Nullable)getCallForUUID:(NSUUID * _Nonnull)callUUID SWIFT_WARN_UNUSED_RESULT;
@end


/// Device-wide delegate for SendBirdCall.
SWIFT_PROTOCOL_NAMED("SendBirdCallDelegate")
@protocol SBCSendBirdCallDelegate
/// Called when incoming calls are received.
/// \code
/// class MyClass: SendBirdCallDelegate {
///     func didStartRinging(_ call: DirectCall) {
///         call.delegate = self
///     }
/// }
///
/// \endcode\param call <code>DirectCall</code> object.
///
- (void)didStartRinging:(SBCDirectCall * _Nonnull)call;
@end


/// Video renderring view. Add to your <code>UIView</code> to show video.
/// \code
/// @IBOutlet weak var localVideoView: UIView?
/// @IBOutlet weak var remoteVideoView: UIView?
///
/// ...
///
/// let localSBView = SendBirdVideoView(frame: self.localVideoView?.frame ?? CGRect.zero)
/// let remoteSBView = SendBirdVideoView(frame: self.remoteVideoView?.frame ?? CGRect.zero)
///
/// self.call.updateLocalVideoView(localSBView)
/// self.call.updateRemoteVideoView(remoteSBView)
///
/// // When you make a call or accept an incoming call.
/// let callOptions = CallOptions(
///                   isAudioEnabled = true,
///                   isVideoEnabled = true,
///                   localVideoView: localSBVideoView
///                   remoteVideoView: remoteSBVideoView)
///
/// // Or when update local / remote view
/// self.call.updateLocalVideoView(localSBView)
/// self.call.updateRemoteVideoView(remoteSBView)
///
///
/// \endcode
SWIFT_CLASS_NAMED("SendBirdVideoView")
@interface SBCVideoView : RTCMTLVideoView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import PushKit;
@import WebRTC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SendBirdCalls",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class SBCCallOptions;

/// Parameter for accepting incoming call from another user. Contains initial configurations for the call.
SWIFT_CLASS_NAMED("AcceptParams")
@interface SBCAcceptParams : NSObject
/// Options for the call.
@property (nonatomic, strong) SBCCallOptions * _Nonnull callOptions;
/// \param callOptions Call Options for configuring the incoming call. Default value is <code>CallOptions()</code> with only audio call capability.
///
- (nonnull instancetype)initWithCallOptions:(SBCCallOptions * _Nonnull)callOptions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Configuration for authentication of SendBird user.
SWIFT_CLASS_NAMED("AuthenticateParams")
@interface SBCAuthenticateParams : NSObject
/// User Id of the user.
@property (nonatomic, copy) NSString * _Nonnull userId;
/// Access Token used for extra layer of security.
@property (nonatomic, copy) NSString * _Nullable accessToken;
/// Push Token for receiving push notifications from the device.
@property (nonatomic, readonly, copy) NSData * _Nullable voipPushToken;
/// Bool value indicating whether the Push token should be unique to the user. If the value is true, SendBird server will remove the push token from other devices of the authenticated user.
@property (nonatomic, readonly) BOOL unique;
@property (nonatomic, readonly, copy) NSData * _Nullable pushToken SWIFT_DEPRECATED_MSG("This variable is deprecated. Use `voipPushToken`. This will be removed from version 1.0");
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId accessToken:(NSString * _Nullable)accessToken pushToken:(NSData * _Nonnull)pushToken unique:(BOOL)unique OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("This initializer is deprecated. Use `init(userId:accessToken:voipPushToken:unique:)`. This will be removed from version 1.0");
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: User Id of the user.
///   </li>
///   <li>
///     accessToken: Access Token used for extra layer of security.
///   </li>
///   <li>
///     pushToken: Push Token for receiving push notifications from the device. Default value is nil.
///   </li>
///   <li>
///     unique: Bool value indicating whether the Push token should be unique to the user. Default value is false.
///   </li>
/// </ul>
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId accessToken:(NSString * _Nullable)accessToken voipPushToken:(NSData * _Nullable)voipPushToken unique:(BOOL)unique OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId accessToken:(NSString * _Nullable)accessToken;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId pushToken:(NSData * _Nonnull)pushToken unique:(BOOL)unique SWIFT_DEPRECATED_MSG("This initializer is deprecated. Use `init(userId:voipPushToken:unique):`. This will be removed from version 1.0");
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId voipPushToken:(NSData * _Nullable)voipPushToken unique:(BOOL)unique;
/// Add push token to authenticate params.
/// \param token Push Token for receiving push notifications from the device. Default value is nil.
///
/// \param unique Bool value indicating whether the Push token should be unique to the user. Default value is false.
///
- (void)setPushWithToken:(NSData * _Nullable)token withUniqueness:(BOOL)unique SWIFT_DEPRECATED_MSG("This method is deprecated. Use `setVoIPPush(token:withUniqueness:)`. This will be removed from version 1.0");
- (void)setVoIPPushWithToken:(NSData * _Nullable)token withUniqueness:(BOOL)unique;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBCVideoView;

/// Options for configuring the call.
SWIFT_CLASS_NAMED("CallOptions")
@interface SBCCallOptions : NSObject
/// Shows local user’s screen.
@property (nonatomic, weak) SBCVideoView * _Nullable localVideoView;
/// Shows remote user’s screen.
@property (nonatomic, weak) SBCVideoView * _Nullable remoteVideoView;
/// If <code>false</code>, the call is for audio only.
/// //
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://dial(to:isVideoCall:callOptions:completionHandler:)">dial(to:isVideoCall:callOptions:completionHandler:)</a>
///   </li>
/// </ul>
@property (nonatomic) BOOL isVideoCall SWIFT_DEPRECATED_MSG("DO NOT use this property. This property is deprecated.");
/// Bool value indicating whether the call will start with audio. If the value if <code>false</code>, the call will start without audio.
@property (nonatomic) BOOL isAudioEnabled;
@property (nonatomic) BOOL isVideoEnabled;
/// Sets up voice call options. <code>isVideoEnabled</code> has <code>false</code> as a value.
/// \param isAudioEnabled Bool value indicating whether the call starts with audio. The default value is <code>true</code>.
///
- (nonnull instancetype)initWithAudioEnabled:(BOOL)isAudioEnabled;
/// \param isAudioEnabled <code>Bool</code> object assigned <code>true</code> as a default value.
///
/// \param isVideoEnabled <code>Bool</code> object assigned <code>true</code> as a default value.
///
/// \param localVideoView <code>SendBirdVideoView</code> object to show local video. Default value is <code>nil</code>
///
/// \param remoteVideoView <code>SendBirdVideoView</code> object to show remote video. Default value is <code>nil</code>
///
- (nonnull instancetype)initWithAudioEnabled:(BOOL)isAudioEnabled videoEnabled:(BOOL)isVideoEnabled localVideoView:(SBCVideoView * _Nullable)localVideoView remoteVideoView:(SBCVideoView * _Nullable)remoteVideoView OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBCCallOptions (SWIFT_EXTENSION(SendBirdCalls)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// Parameter for dialing another user. Contains initial configurations for the call.
SWIFT_CLASS_NAMED("DialParams")
@interface SBCDialParams : NSObject
/// User Id of the callee to be called.
@property (nonatomic, copy) NSString * _Nonnull calleeId;
/// <code>Bool</code> value indicating whether the call supports vieo call. The default value is <code>false</code>.
@property (nonatomic) BOOL isVideoCall;
/// Options for the call.
@property (nonatomic, strong) SBCCallOptions * _Nonnull callOptions;
/// Custom items for the call.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull customItems;
/// \param calleeId The callee’s user ID
///
/// \param isVideoCall <code>Bool</code> value indicating whether the call supports vieo call. The default value is <code>false</code>.
///
/// \param callOptions Call options for configuring the outgoing call. The default value is <code>CallOptions()</code> with only audio call capability.
///
/// \param customItems Custom items for the call. The default value is empty dictionary.
///
- (nonnull instancetype)initWithCalleeId:(NSString * _Nonnull)calleeId isVideoCall:(BOOL)isVideoCall callOptions:(SBCCallOptions * _Nonnull)callOptions customItems:(NSDictionary<NSString *, NSString *> * _Nonnull)customItems OBJC_DESIGNATED_INITIALIZER;
/// \param calleeId The callee’s user ID
///
- (nonnull instancetype)initWithCalleeId:(NSString * _Nonnull)calleeId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBCDialParams (SWIFT_EXTENSION(SendBirdCalls)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

@class SBCDirectCallUser;
enum SBCDirectCallUserRole : NSInteger;
enum SBCDirectCallEndResult : NSInteger;
@protocol SBCDirectCallDelegate;

/// DirectCall class for a call between two participants. Every call is identified with a unique key.
SWIFT_CLASS_NAMED("DirectCall")
@interface SBCDirectCall : NSObject
/// Call ID of the call. This value is generated from our SendBird server and is <code>String</code> representation of a UUID
@property (nonatomic, readonly, copy) NSString * _Nonnull callId;
/// The UUID form of callId. Useful when dealing with CallKit.
@property (nonatomic, readonly, copy) NSUUID * _Nullable callUUID;
/// The caller object.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable caller;
/// The callee object.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable callee;
/// Custom items of the DirectCall.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull customItems;
/// The remote user of the call.
/// \code
/// guard let remoteUser = self.call.remoteUser else { return }
/// self.remoteUserIdLabel.text = remoteUser.userId
///
/// \endcode
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable remoteUser;
/// The local user of the call.
/// \code
/// guard let localUser = self.call.localUser else { return }
/// self.localUserIdLabel.text = localUser.userId
///
/// \endcode
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable localUser;
/// The role of the current user.
@property (nonatomic, readonly) enum SBCDirectCallUserRole myRole;
/// End Result of the ended call.
@property (nonatomic, readonly) enum SBCDirectCallEndResult endResult;
/// Boolean value indicating whether the call has ended.
@property (nonatomic, readonly) BOOL isEnded;
/// The start time of call. Int64 of miliseconds.
/// important:
///
/// Returns 0 if the call hasn’t started.
@property (nonatomic, readonly) int64_t startedAt;
/// The ended time of call. Int64 of miliseconds.
/// important:
///
/// Returns 0 if the call hasn’t ended.
@property (nonatomic, readonly) int64_t endedAt;
/// The duration of the call. Int64 of miliseconds.
/// important:
///
/// Returns 0 if the call hasn’t started.
@property (nonatomic, readonly) int64_t duration;
/// The audio status of the remote user.
@property (nonatomic, readonly) BOOL isRemoteAudioEnabled;
/// The audio status of the local user.
@property (nonatomic, readonly) BOOL isLocalAudioEnabled;
/// The local <code>SendBirdVideoView</code>. This is a read-only property. If you want to update value, use <a href="x-source-tag://updateLocalVideo(_:)">updateLocalVideo(_:)</a>
/// <ul>
///   <li>
///     See Also:
///     <ul>
///       <li>
///         <a href="x-source-tag://updateLocalVideo(_:)">updateLocalVideo(_:)</a>
///       </li>
///       <li>
///         <a href="x-source-tag://SendBirdVideoView">SendBirdVideoView</a>
///       </li>
///     </ul>
///   </li>
/// </ul>
@property (nonatomic, readonly, weak) SBCVideoView * _Nullable localVideoView;
/// <ul>
///   <li>
///     See Also:
///     <ul>
///       <li>
///         <a href="x-source-tag://updateLocalVideo(_:)">updateRemoteVideo(_:)</a>
///       </li>
///       <li>
///         <a href="x-source-tag://SendBirdVideoView">SendBirdVideoView</a>
///       </li>
///     </ul>
///   </li>
/// </ul>
@property (nonatomic, readonly, weak) SBCVideoView * _Nullable remoteVideoView;
/// The diplaying status of the local user.
@property (nonatomic, readonly) BOOL isLocalVideoEnabled;
/// The displaying staus of the remote user.
@property (nonatomic, readonly) BOOL isRemoteVideoEnabled;
/// Boolean value indicating whether the call supports video call. If <code>false</code>, the call is for audio only. The default value is <code>false</code>.
@property (nonatomic, readonly) BOOL isVideoCall;
/// <code>DirectCallDelegate</code> for this call. DirectCall will notify this delegate for any call-specific events.
/// \code
/// call.delegate?.someMethod()
///
/// \endcode
@property (nonatomic, weak) id <SBCDirectCallDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// User Role of Direct Call
/// <ul>
///   <li>
///     Cases:
///     <ul>
///       <li>
///         caller: The user who made the call.
///       </li>
///       <li>
///         callee: The user who received the call.
///       </li>
///     </ul>
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, SBCDirectCallUserRole, "UserRole", open) {
  SBCDirectCallUserRoleCaller = 0,
  SBCDirectCallUserRoleCallee = 1,
};


@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// Updates local <code>SendBirdVideoView</code>
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://SendBirdVideoView">SendBirdVideoView</a>
///   </li>
/// </ul>
/// \code
///
///
/// \endcode\param view <code>SendBirdVideoView</code> object.
///
- (void)updateLocalVideoView:(SBCVideoView * _Nonnull)videoView;
/// Updates remote <code>SendBirdVideoView</code>
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://SendBirdVideoView">SendBirdVideoView</a>
///   </li>
/// </ul>
/// \param view <code>SendBirdVideoView</code> object.
///
- (void)updateRemoteVideoView:(SBCVideoView * _Nonnull)videoView;
@end



@class SBCError;

@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// Requests <code>ACCEPT</code> to <em>SendBird</em> server and sets up Turn credential. This method is called when the callee accepts incoming call.
/// <ul>
///   <li>
///     See Also: use <a href="x-source-tag://accept(with:)">accept(with:)</a> instead
///   </li>
/// </ul>
/// \param callOptions Set up the call that you’re receiving. Cannot be empty
///
- (void)acceptWithCallOptions:(SBCCallOptions * _Nonnull)callOptions SWIFT_DEPRECATED_MSG("This method is deprecated. Use accept(with:completionHandler:) instead. This will be removed from version 0.8");
/// Accepts the incoming direct call. SendBirdCalls will continue to process the call with the server.
/// \param params Set up the call that you’re receiving. Cannot be empty
///
- (void)acceptWithParams:(SBCAcceptParams * _Nonnull)params;
/// Ends the call. <code>DirectCallDelegate.didEnd(call:)</code> delegate method will be called after successful ending. This delegate will also be called when the remote user ends the call.
/// \code
/// // End a call
/// call.end();
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didEnd(_ call: DirectCall) {
///         //
///     }
///     ...
/// }
///
/// \endcode
- (void)end;
/// Mutes the audio of local user. Will trigger <code>DirectCallDelegate.didRemoteAudioSettingsChange()</code> delegate method of the remote user. If the remote user changes their audio settings, local user will be notified via same delegate method.
/// \code
/// // mute my microphone
/// call.muteMicrophone();
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteAudioSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteAudioEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcode
- (void)muteMicrophone;
/// Unmutes the audio of local user. Will trigger <code>DirectCallDelegate.didRemoteAudioSettingsChange()</code> delegate method of the remote user. If the remote user changes their audio settings, local user will be notified via same delegate method.
/// \code
/// // unmute my microphone
/// call.unmuteMicrophone();
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteAudioSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteAudioEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcode
- (void)unmuteMicrophone;
/// Starts local video. If the callee changes video settings, the caller is notified via the <code>DirectCallDelegate.didRemoteVideoSettingsChange()</code> delegate.
/// \code
/// // Start my local video
/// call.startVideo()
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteVideoSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteVideoEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcode
- (void)startVideo;
/// Stops local video. If the callee changes video settings, the caller is notified via the <code>DirectCallDelegate.didRemoteVideoSettingsChange()</code> delegate.
/// \code
/// // Stop my local video
/// call.stopVideo()
///
/// // receives the event
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteVideoSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteVideoEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcode
- (void)stopVideo;
/// Updates custom items of the call.
/// \param customItems Custom items of [String: String] to be updated or inserted.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
- (void)updateCustomItemsWithCustomItems:(NSDictionary<NSString *, NSString *> * _Nonnull)customItems completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes custom items of the call.
/// \param customItemKeys Keys of the custom item that you want to delete.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
- (void)deleteCustomItemsWithCustomItemKeys:(NSArray<NSString *> * _Nonnull)customItemKeys completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes all custom items of the call.
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
- (void)deleteAllCustomItemsWithCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
@end







@class AVAudioSession;
@class AVAudioSessionRouteDescription;

/// DirectCallDelegate methods are invoked along the flow of the call. You <em>should</em> implement the delegate methods to adjust your app according to the changes to the states of the call.
/// \code
/// override func viewDidLoad() {
///    // ...
///    call.delegate = self
/// }
///
/// // ...
///
/// \endcode
SWIFT_PROTOCOL_NAMED("DirectCallDelegate")
@protocol SBCDirectCallDelegate
@optional
/// Called when the callee has accepted the call, but not yet connected to media streams.
- (void)didEstablish:(SBCDirectCall * _Nonnull)call;
@required
/// Called when media streams between the caller and callee are connected and audio/video is enabled.
/// \code
/// func didConnect(_ call: DirectCall) {
///    self.endButton.isEnabled = true
/// }
///
/// \endcode
- (void)didConnect:(SBCDirectCall * _Nonnull)call;
@optional
/// Called when DirectCall begins attempting to reconnect to the server after losing connection.
- (void)didStartReconnecting:(SBCDirectCall * _Nonnull)call;
/// Called when DirectCall successfully reconnects to the server.
- (void)didReconnect:(SBCDirectCall * _Nonnull)call;
/// Called when the remote user changes audio settings.
/// \code
/// class MyClass: DirectCallDelegate {
///     ...
///     func didRemoteAudioSettingsChange(_ call: DirectCall) {
///         if (call.isRemoteAudioEnabled) {
///             // The peer has been unmuted.
///         } else {
///             // The peer has been muted.
///         }
///     }
///     ...
/// }
///
/// \endcode
- (void)didRemoteAudioSettingsChange:(SBCDirectCall * _Nonnull)call;
/// Called when the peer changes video settings.
- (void)didRemoteVideoSettingsChange:(SBCDirectCall * _Nonnull)call;
@required
/// Called when the call has ended.
/// \code
/// func didEnd(_ call: DirectCall) {
///    self.dismiss(animated: true, completion: nil)
/// }
///
/// \endcode
- (void)didEnd:(SBCDirectCall * _Nonnull)call;
@optional
/// Called when the audio device has been changed. To change audio route, see <a href="x-source-tag://routePickerView(frame:)">routePickerView(frame:)</a>
/// \code
/// func didAudioDeviceChange(_ call: DirectCall, session: AVAudioSession, previousRoute: AVAudioSessionRouteDescription, reason: AVAudioSession.RouteChangeReason) {
///    // You can get current audio I/O, available inputs from the session. You can also set preferred input.
///    
///    let currentRoute = session.currentRoute
///    let outputs = currentRoute.outputs
///    let inputs = currentRoute.inputs
///
///    // Update your UI according to the changes to the audio devices, such as external speaker, bluetooth, and built-in speaker.
/// }
///
/// \endcode<ul>
///   <li>
///     See Also:
///     <ul>
///       <li>
///         <a href="x-source-tag://routePickerView(frame:)">routePickerView(frame:)</a>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param call <code>DirectCall</code> object
///
/// \param session A shared instance of <code>AVAudiosession</code>. You can get a current audio route containing inputs and outputs descriptions.
///
/// \param previousRoute A previous audio route.
///
/// \param reason The reason of system audio change.
///
- (void)didAudioDeviceChange:(SBCDirectCall * _Nonnull)call session:(AVAudioSession * _Nonnull)session previousRoute:(AVAudioSessionRouteDescription * _Nonnull)previousRoute reason:(AVAudioSessionRouteChangeReason)reason;
/// Called when the custom items of the call are updated.
/// \param call DirectCall that has updated custom items.
///
/// \param updatedKeys keys that have updated.
///
- (void)didUpdateCustomItemsWithCall:(SBCDirectCall * _Nonnull)call updatedKeys:(NSArray<NSString *> * _Nonnull)updatedKeys;
/// Called when the custom items of the call are deleted.
/// \param call DirectCall that has deleted custom items.
///
/// \param deletedKeys keys that have deleted.
///
- (void)didDeleteCustomItemsWithCall:(SBCDirectCall * _Nonnull)call deletedKeys:(NSArray<NSString *> * _Nonnull)deletedKeys;
@end

/// End results for DirectCall. Indicates reasons for failure or completion. Value for an ongoing call is <code>none</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, SBCDirectCallEndResult, "DirectCallEndResult", open) {
/// Default value of the EndResult.
  SBCDirectCallEndResultNone = 0,
/// The call has ended by either the caller or callee after successful connection.
  SBCDirectCallEndResultCompleted = 1,
/// The caller has canceled the call before the callee accepts or declines.
  SBCDirectCallEndResultCanceled = 2,
/// The callee has declined the call.
  SBCDirectCallEndResultDeclined = 3,
/// The call is accepted on one of the callee’s other devices. All the other devices will receive this call result.
  SBCDirectCallEndResultOtherDeviceAccepted = 4,
/// SendBird server failed to establish a media session between the caller and callee within a specific period of time.
  SBCDirectCallEndResultTimedOut = 5,
/// Data streaming from either the caller or the callee has stopped due to a WebRTC connection issue while calling.
  SBCDirectCallEndResultConnectionLost = 6,
/// The callee hasn’t either accepted or declined the call for a specific period of time.
  SBCDirectCallEndResultNoAnswer = 7,
/// The dial() method of the call has failed.
  SBCDirectCallEndResultDialFailed = 8,
/// The accept() method of the call has failed.
  SBCDirectCallEndResultAcceptFailed = 9,
  SBCDirectCallEndResultUnknown = 10,
};


/// Direct Call Log containing information about a direct call.
SWIFT_CLASS_NAMED("DirectCallLog")
@interface SBCDirectCallLog : NSObject
/// Call Id of the Call
@property (nonatomic, readonly, copy) NSString * _Nonnull callId;
/// The started time of the Call. Int64 of miliseconds.
@property (nonatomic, readonly) int64_t startedAt;
/// The ended time of the Call. Int64 of miliseconds.
@property (nonatomic, readonly) int64_t endedAt;
/// The duration of the Call. Int64 of miliseconds.
@property (nonatomic, readonly) int64_t duration;
/// DirectCallUser that ended the call.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable endedBy;
/// The caller of the call.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable caller;
/// The callee of the call.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable callee;
/// The end result of the call.
@property (nonatomic, readonly) enum SBCDirectCallEndResult endResult;
/// The role of the current user in the call.
@property (nonatomic, readonly) enum SBCDirectCallUserRole myRole;
/// A boolean value indicating whether the call is video call.
@property (nonatomic, readonly) BOOL isVideoCall;
/// Custom items of DirectCallLog instance.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull customItems;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



enum UserRoleFilter : NSInteger;
@class NSArray;

/// A user’s call history is available via a <code>DirectCallLogListQuery</code> instance.
/// \code
/// let params = DirectCallLogListQuery.Params()
/// let query = SendBirdCall.createDirectCallLogListQuery(with: params)
///
/// query.next(completionHandler: { callLogs, error in
///     //
/// }
///
/// \endcode
SWIFT_CLASS_NAMED("DirectCallLogListQuery")
@interface SBCDirectCallLogListQuery : NSObject
/// If <code>true</code>, call history is being retrieved from SendBirdCall server. The default value is <code>false</code>
@property (nonatomic, readonly) BOOL isLoading;
/// If <code>true</code>, there is more call history to be retrieved. The default value is <code>true</code>.
@property (nonatomic, readonly) BOOL hasNext;
/// Returns call logs of the specified role. For example, <code>setMyRole(Callee)</code> returns only the callee’s call logs.
@property (nonatomic, readonly) enum UserRoleFilter myRole;
@property (nonatomic, readonly, strong) NSArray * _Nonnull endResultsArray;
/// The number of call logs to return at once. This is read-only property. If you want to set the limit, see <a href="x-source-tag://limit">Param.limit</a>
/// note:
/// The maximum value is 100 and the minimum is 1.
/// <ul>
///   <li>
///     See Also: <a href="x-source-tag://limit">Param.limit</a>
///   </li>
/// </ul>
@property (nonatomic, readonly) int32_t limit;
/// Used to query call history from SendBirdCall server.
- (void)nextWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBCDirectCallLog *> * _Nullable, SBCError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Filter for DirectCallLogListQuery of specific type of user in a call.
/// <ul>
///   <li>
///     Cases:
///     <ul>
///       <li>
///         caller: Caller in a call.
///       </li>
///       <li>
///         callee: Callee in a call.
///       </li>
///       <li>
///         all: all users.
///       </li>
///     </ul>
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, UserRoleFilter, open) {
  UserRoleFilterCaller = 0,
  UserRoleFilterCallee = 1,
  UserRoleFilterAll = 2,
};


/// \code
/// let params = DirectCallLogListQuery.Params()
/// let query = SendBirdCall.createDirectCallLogListQuery(with: params)
/// query.next(completionHandler: { callLogs, error in
///     //
/// }
///
/// \endcode
SWIFT_CLASS_NAMED("Params")
@interface SBCDirectCallLogListQueryParams : NSObject
@property (nonatomic) enum UserRoleFilter myRole;
@property (nonatomic, readonly, strong) NSArray * _Nonnull endResultsArray;
- (void)addEndResult:(enum SBCDirectCallEndResult)endResult;
- (void)removeEndResult:(enum SBCDirectCallEndResult)endResult;
/// Specifies the number of call logs to return at once.
/// note:
/// The maximum value is 100 and the minimum is 1.
@property (nonatomic) int32_t limit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class for SendBirdCalls User.
SWIFT_CLASS_NAMED("User")
@interface SBCUser : NSObject
/// The user ID of the call user.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// The nickname of the user.
@property (nonatomic, readonly, copy) NSString * _Nullable nickname;
/// The profile image URL of the user.
@property (nonatomic, readonly, copy) NSString * _Nullable profileURL;
/// Metadata of the user.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
/// Activity status of the user. If it is <code>false</code>, the user is offline.
/// <ul>
///   <li>
///     Default: <code>false</code>
///   </li>
/// </ul>
@property (nonatomic, readonly) BOOL isActive;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DirectCallUser")
@interface SBCDirectCallUser : SBCUser
/// Shows whether the user is caller or callee.
@property (nonatomic, readonly) enum SBCDirectCallUserRole role;
@end





@class NSCoder;

/// Custom Error class for SendBirdCalls. Subclass of NSError.
SWIFT_CLASS("_TtC13SendBirdCalls8SBCError")
@interface SBCError : NSError
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Custom Error codes representing different error scenarios.
typedef SWIFT_ENUM_NAMED(NSInteger, SBCErrorCode, "ErrorCode", open) {
  SBCErrorCodeDialCanceled = 1800100,
  SBCErrorCodeMyUserIdNotAllowed = 1800101,
  SBCErrorCodeRequestFailed = 1800200,
  SBCErrorCodeWebsocketConnectionNotOpened = 1800201,
  SBCErrorCodeWebsocketConnectionFailed = 1800202,
  SBCErrorCodeNoResponseDueToTimeout = 1800203,
  SBCErrorCodeRequestFailedDueToWebsocketConnectionLost = 1800204,
  SBCErrorCodeWrongResponse = 1800205,
  SBCErrorCodeQueryInProgress = 1800206,
  SBCErrorCodeInternalServerError = 1800207,
  SBCErrorCodeMalformedData = 1800208,
  SBCErrorCodeInvalidParameterValue = 1800300,
  SBCErrorCodeInvalidParameterType = 1800301,
  SBCErrorCodeInstanceNotInitialized = 1800302,
  SBCErrorCodeNotAuthenticated = 1800303,
};


SWIFT_PROTOCOL("_TtP13SendBirdCalls14SBCLogReceiver_")
@protocol SBCLogReceiver
/// Delegate method to be called when new log is generated. You have to implement this method to use the logs in your app.
/// \code
/// var logs: [String] = []
///
/// func log(message: String) {
///    self.logs.append(message)
///    self.updateLogsView()
/// }
///
/// func updateLogsView() {
///    // ...
/// }
///
/// \endcode
- (void)logMessage:(NSString * _Nonnull)message;
@end


SWIFT_CLASS("_TtC13SendBirdCalls9SBCLogger")
@interface SBCLogger : NSObject
/// Adds receiver to receive logs from SendBirdCall Logger
/// \code
/// override func viewDidLoad() {
///    // ...
///    
///    SBCLogger.add(receiver: self)
/// }
///
/// \endcode\param receiver The object inheritted<code>SBCLogReceiver</code> to receive logs
///
+ (void)addWithReceiver:(id <SBCLogReceiver> _Nonnull)receiver;
/// Removes receiver added before.
/// \code
/// SBCLogger.remove(receiver: self)
///
/// \endcode\param receiver The object inheritted<code>SBCLogReceiver</code>
///
+ (void)removeWithReceiver:(id <SBCLogReceiver> _Nonnull)receiver;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;
@protocol SBCSendBirdCallDelegate;
@class PKPushRegistry;
@class PKPushPayload;

SWIFT_CLASS_NAMED("SendBirdCall")
@interface SBCSendBirdCall : NSObject
/// The app id of your SendBirdCalls application. Configure the app id using <a href="x-source-tag://configure(appId:)">configure(appId:)</a>. This is get-only property.
/// important:
/// If you change the app ID, a previous configured app ID will be removed and all calls will be canceled.
/// \code
/// SendBirdCall.appId    // "Optional(YOUR_APP_ID)"
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable appId;)
+ (NSString * _Nullable)appId SWIFT_WARN_UNUSED_RESULT;
/// Initiate <code>SendBirdCall</code> instance when a client app is launched. If another initialization with another <code>APP_ID</code> takes place, all existing data will be deleted and the <code>SendBirdCall</code> instance will be initialized with the new <code>APP_ID</code>.
/// \code
/// SendBirdCall.configure(appId: "YOUR_APP_ID")
///
/// \endcode\param appId Your own app ID from your dashboard
///
///
/// returns:
/// (Discardable)<code>Bool</code> value. If the paramter has an empty string or equal previous app ID, it returns <code>false</code>.
/// If the method configures app ID successfully, it returns <code>true</code>.
+ (BOOL)configureWithAppId:(NSString * _Nonnull)appId;
/// SendBirdCalls SDK Version
/// \code
/// self.versionLabel.text = "SendBirdCalls v\(SendBirdCall.sdkVersion)"
///
/// // "SendBirdCalls v1.0.0"
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Provides a view that allows user to change the system audio route. Returns <a href="https://developer.apple.com/documentation/avkit/avroutepickerview">AVRoutePickerView</a> in iOS 11 or later and <a href="https://developer.apple.com/documentation/mediaplayer/mpvolumeview">MPVolumeView</a> in earlier iOS version.
/// \code
/// let routePickerView = SendBirdCall.routePickerView(frame: frame)
/// self.parentView.addSubView(routePickerView)
///
/// \endcode<ul>
///   <li>
///     Customization
///   </li>
/// </ul>
/// \code
/// if #available(iOS 11.0, *) {
///    guard let routePickerView = routePickerView as? AVRoutePickerView else { return }
///    // Set up AVRoutePickerView
/// } else {
///    guard let routePickerView = routePickerView as? MPVolumeView else { return }
///    // Set up MPVolumeView
/// }
///
///
///
/// \endcode<ul>
///   <li>
///     See Also:
///     <ul>
///       <li>
///         <a href="https://developer.apple.com/documentation/mediaplayer/mpvolumeview">MPVolumeView</a>
///       </li>
///       <li>
///         <a href="https://developer.apple.com/documentation/avkit/avroutepickerview">AVRoutePickerView</a>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param frame <code>CGRect</code> value that is assigned to view’s frame.
///
///
/// returns:
///
/// <a href="https://developer.apple.com/documentation/avkit/avroutepickerview">AVRoutePickerView</a> in iOS 11.0 or later. (<a href="https://developer.apple.com/documentation/mediaplayer/mpvolumeview">MPVolumeView</a>  in previous iOS version)
+ (UIView * _Nonnull)routePickerViewWithFrame:(CGRect)frame SWIFT_WARN_UNUSED_RESULT;
/// Specifies the queue that you want to use for callbacks and delegate methods
/// \param queue DispatchQueue that will be used when callbacks and delegates are called.
///
+ (void)executeOnQueue:(dispatch_queue_t _Nonnull)queue;
/// Registers a device-specific <code>SendBirdCallDelegate </code>event handler. Responding to device-wide events (e.g. incoming calls) is then managed as shown below:
/// \code
/// SendBirdCall.addDelegate(self, identifier: UNIQUE_HANDLER_ID)
///
/// func didStartRinging(_ call: DirectCall) {
///     call.delegate = self
/// }
///
/// \endcode\param delegate SendBirdCallDelegate that listens to SendBirdCall events
///
/// \param identifier Identifier for the specific delegate
///
+ (void)addDelegate:(id <SBCSendBirdCallDelegate> _Nonnull)delegate identifier:(NSString * _Nonnull)identifier;
/// Removes delegate for the given identifier.
/// \param identifier String identifier for the delegate. If SendBirdCall doesn’t have the given identifier, it will be ignored.
///
+ (void)removeDelegateWithIdentifier:(NSString * _Nonnull)identifier;
/// Removes all delegate for SendBirdCall events.
+ (void)removeAllDelegates;
/// Returns call for call ID.
/// \param forCallId Call ID.
///
///
/// returns:
///
/// <code>DirectCall</code> object with corresponding call ID. It can be <code>nil</code>.
+ (SBCDirectCall * _Nullable)getCallForCallId:(NSString * _Nonnull)callId SWIFT_WARN_UNUSED_RESULT;
/// Returns the currently authenticated user.
///
/// returns:
///
/// User that is currently authenticated. Returns nil if no user exists.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBCUser * _Nullable currentUser;)
+ (SBCUser * _Nullable)currentUser SWIFT_WARN_UNUSED_RESULT;
/// Authenticates user with user ID and access token that you generated at SendBird Dashboard.  In order to make and receive calls, authenticate the user with SendBird server with the the <code>SendBirdCall.authenticate() </code>method.
/// \code
/// let params = AuthenticateParams(userId: userId, accessToken: accessToken)
///
/// SendBirdCall.authenticate(with: params) { user, error in
///     guard let user = user, error == nil else {
///         return
///     }
/// }
///
/// \endcode\param params <code>AuthenticateParams</code> that contains User Id, Access Token, Push Token, and Unique
///
/// \param completionHandler The handler to call when the authenication is complete.
///
+ (void)authenticateWithParams:(SBCAuthenticateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBCUser * _Nullable, SBCError * _Nullable))completionHandler;
+ (void)deauthenticateWithPushToken:(NSData * _Nullable)pushToken completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("This method is deprecated. Use `deauthenticate(voipPushToken:, completionHandler:)`. This will be removed from version 1.0");
/// Deauthenticates user. If you call the method without push token, you can keep receiving calls even if the application is terminated or is in background. If you don’t want to receive VoIP push notification anymore, you have to pass the VoIP push token of the device.
/// \code
/// class MyClass {
///     func signOut() {
///         SendBirdCall.deauthenticate(voipPushToken: myVoIPPushToken) { error in
///             guard error == nil else {
///                 // handle error
///                 return
///             }
///
///             // ...
///         }
///     }
/// }
///
/// \endcode\param voipPushToken Data of Push Token. Nullable. Doesn’t remove push token if the token is <code>nil</code>
///
/// \param completionHandler Error Handler to be called after deauthenticate process is finished
///
+ (void)deauthenticateWithVoIPPushToken:(NSData * _Nullable)voipPushToken completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// This method will be removed in v0.8.0
/// <ul>
///   <li>
///     See Also: use <a href="x-source-tag://dial(with:completionHandler:)">dial(with:completionHandler:)</a> instead
///   </li>
/// </ul>
+ (SBCDirectCall * _Nullable)dialTo:(NSString * _Nonnull)calleeId callOptions:(SBCCallOptions * _Nonnull)callOptions completionHandler:(void (^ _Nonnull)(SBCDirectCall * _Nullable, SBCError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("This method is deprecated. Use dial(with:completionHandler:) instead. This will be removed from version 0.8");
/// This method will be removed in v0.8.0
/// <ul>
///   <li>
///     See Also: use <a href="x-source-tag://dial(with:completionHandler:)">dial(with:completionHandler:)</a> instead
///   </li>
/// </ul>
+ (SBCDirectCall * _Nullable)dialTo:(NSString * _Nonnull)calleeId isVideoCall:(BOOL)isVideoCall callOptions:(SBCCallOptions * _Nonnull)callOptions completionHandler:(void (^ _Nonnull)(SBCDirectCall * _Nullable, SBCError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("This method is deprecated. Use dial(with:completionHandler:) instead. This will be removed from version 0.8");
/// Makes a call to user(callee) directly. (1:1 Call).  Use the <code>CallOptions</code> object to choose initial call configuration (e.g. muted/unmuted)
/// \code
/// let params = DialParams(calleeId: CALLEE_ID, callOptions: CallOptions())
///
/// let directCall = SendBirdCall.dial(with: params) { directCall, error in
///     //
/// }
///
/// directCall.delegate = self
///
/// \endcode\param params <code>DialParams</code> that contains calleeId, videoCall flag, CallOptions, and customItems.
///
/// \param completionHandler Callback completionHandler to be called after dialing.
///
///
/// returns:
/// (Discardable) <code>DirectCall</code> object. If the method failed to make a call, it would return <code>nil</code>.
+ (SBCDirectCall * _Nullable)dialWithParams:(SBCDialParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBCDirectCall * _Nullable, SBCError * _Nullable))completionHandler;
/// Handles incoming VoIP push with SendBirdCalls payload. Incoming calls are received either via the application’s persistent internal server connection, or (if the application is in the background) via PushKit. PushKit messages received by the SendBirdCall instance <em>MUST</em> be delivered to the SDK.
/// \code
/// class MyClass: PKPushRegistryDelegate {
///     func pushRegistry(_ registry: PKPushRegistry, didReceiveIncomingPushWith payload: PKPushPayload, for type: PKPushType, completion: @escaping () -> Void) {
///         SendBirdCall.pushRegistry(registry, didReceiveIncomingPushWith: payload, for: type) { uuid in
///       
///             // IMPORTANT: You MUST report incoming call to CallKit when you receive a pushkit push.
///             let provider = CXProvider(configuration: CXProviderConfiguration)
///             let update = CXCallUpdate()
///             update.remoteHandle = CXHandle(type: .generic, value: HANDLE_VALUE)
///             provider.reportNewIncomingCall(with: uuid, update: update) { error in
///                 completion()
///             })
///         }
///     }
/// }
///
/// \endcode\param registry <code>PKPushRegistry</code> object same as  <code>PKPushRegistryDelegate</code> registry.
///
/// \param payload <code>PKPushPayload</code> in incoming VoIP push notification.
///
/// \param type <code>PKPushType</code> of push(<code>VoIP</code>)
///
/// \param completionHandler This closure is invoked with <code>UUID</code> from the payload.
///
+ (void)pushRegistry:(PKPushRegistry * _Nonnull)registry didReceiveIncomingPushWith:(PKPushPayload * _Nonnull)payload for:(PKPushType _Nonnull)type completionHandler:(void (^ _Nullable)(NSUUID * _Nullable))completionHandler;
/// This method will be removed in v1.0.0
/// <ul>
///   <li>
///     See Also: use <a href="x-source-tag://registerVoIPPush(token:unique:completionHandler:)">registerVoIPPush(token:unique:completionHandler:)</a> instead
///   </li>
/// </ul>
+ (void)registerWithPushToken:(NSData * _Nullable)pushToken unique:(BOOL)unique completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("This method is deprecated. Use `registerVoIPPush(token:unique:completionHandler:)`. This will be removed from version 1.0");
/// To receive calls while an app is in the background or closed, a device registration token must be registered to the server. Register a device push token during authentication by either providing it as a parameter in the <code>SendBirdCall.authenticate()</code> method, or after authentication has completed using the <code>SendBirdCall.registerVoIPPushToken()</code> method.
/// \code
/// // PKPushRegistryDelegate
/// class AppDelegate: PKPushRegistryDelegate {
///    func voipRegistration() {
///        self.voipRegistry = PKPushRegistry(queue: DispatchQueue.main)
///        self.voipRegistry?.delegate = self
///        self.voipRegistry?.desiredPushTypes = [.voIP]
///    }
///
///    ...
///    func pushRegistry(_ registry: PKPushRegistry, didUpdate pushCredentials: PKPushCredentials, for type: PKPushType) {
///        SendBirdCall.registerVoIPPush(token: pushCredentials.token, unique: true) { (error) in
///            guard let error = error else {
///                return
///            }
///            // The Push Token has been registered successfully
///        }
///    }
///    ...
/// }
///
/// \endcode\param voipPushToken <code>Data</code> object from <code>pushCredential.token</code>.  Refer to <code>PKPushRegistryDelegate</code>
///
/// \param unique If it is false, you can register more token for multi devices. It has <code>false</code> as a default value.
///
+ (void)registerVoIPPushWithToken:(NSData * _Nullable)token unique:(BOOL)unique completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// This method will be removed in v1.0.0
/// <ul>
///   <li>
///     See Also: use <a href="x-source-tag://unregisterVoIPPush(token:completionHandler:)">unregisterVoIPPush(token:completionHandler:)</a> instead
///   </li>
/// </ul>
+ (void)unregisterWithPushToken:(NSData * _Nullable)pushToken completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("This method is deprecated. Use `unregisterVoIPPush(token:completionHandler:)`. This will be removed from version 1.0");
/// Unregisters a push token of specific device. You will not receive VoIP push notification for a call anymore.   If you don’t want to receive a call in all of the devices of the users, call <code>unregisterAllVoIPPushTokens(completionHandler:)</code>.
/// \code
/// func removeVoIPPushToken() {
///     SendBirdCall.unregisterVoIPPush(token: myVoIPPushToken) { error in
///     guard error == nil else { return }
///     // Unregistered successfully
/// }
///
/// \endcode\param voipPushToken Optional Data for the push token that you want to unregister
///
/// \param completionHandler ErrorHandler that returns callback with error.
///
+ (void)unregisterVoIPPushWithToken:(NSData * _Nullable)token completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// This method will be removed in v1.0
/// <ul>
///   <li>
///     See Also: use <a href="x-source-tag://unregisterAllVoIPPushTokens(completionHandler:)">unregisterAllVoIPPushTokens(completionHandler:)</a> instead
///   </li>
/// </ul>
+ (void)unregisterAllPushTokensWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("This method is deprecated. Use `unregisterAllVoIPPushTokens(completionHandler:)`. This will be removed from version 1.0");
/// Unregister all push token registered to the current user(multi device).  You will not receive a call in all of the devices of the users.
/// \code
/// func removeAllOfVoIPPushTokens() {
///     func unregisterAllVoIPPushTokens(completionHandler: ErrorHandler?) {
///         guard error == nil else { return }
///         // Unregistered all push tokens successfully
///     }
/// }
///
/// \endcode\param completionHandler ErrorHandler that returns callback with error
///
+ (void)unregisterAllVoIPPushTokensWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Creates a Direct Call Log List Query from given params.
/// \param params DirectCallLogListQuery Params with options for creating query.
///
///
/// returns:
///
/// DirectCallLogListQuery: Returns optional query object. Returns nil if current user does not exit.
+ (SBCDirectCallLogListQuery * _Nullable)createDirectCallLogListQueryWithParams:(SBCDirectCallLogListQueryParams * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
/// Updates custom items for a given call Id.
/// \param callId Call ID.
///
/// \param customItems Custom items of [String: String] to be updated or inserted.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
+ (void)updateCustomItemsWithCallId:(NSString * _Nonnull)callId customItems:(NSDictionary<NSString *, NSString *> * _Nonnull)customItems completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes custom items for a given call Id.
/// \param callId Call ID.
///
/// \param customItemKeys Keys of custom items that you want to delete.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
+ (void)deleteCustomItemsWithCallId:(NSString * _Nonnull)callId customItemKeys:(NSArray<NSString *> * _Nonnull)customItemKeys completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
/// Deletes all custom items for a given call Id.
/// \param callId Call ID.
///
/// \param completionHandler Callback completionHandler. Contains custom items, changes custom items, and error.
///
+ (void)deleteAllCustomItemsWithCallId:(NSString * _Nonnull)callId completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nullable, NSArray<NSString *> * _Nullable, SBCError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBCSendBirdCall (SWIFT_EXTENSION(SendBirdCalls))
/// Returns call for a given UUID. Returns nil if such call doesn’t exist.
+ (SBCDirectCall * _Nullable)getCallForUUID:(NSUUID * _Nonnull)callUUID SWIFT_WARN_UNUSED_RESULT;
@end


/// Device-wide delegate for SendBirdCall.
SWIFT_PROTOCOL_NAMED("SendBirdCallDelegate")
@protocol SBCSendBirdCallDelegate
/// Called when incoming calls are received.
/// \code
/// class MyClass: SendBirdCallDelegate {
///     func didStartRinging(_ call: DirectCall) {
///         call.delegate = self
///     }
/// }
///
/// \endcode\param call <code>DirectCall</code> object.
///
- (void)didStartRinging:(SBCDirectCall * _Nonnull)call;
@end

@protocol RTCVideoViewShading;

/// Video renderring view. Add to your <code>UIView</code> to show video.
/// \code
/// @IBOutlet weak var localVideoView: UIView?
/// @IBOutlet weak var remoteVideoView: UIView?
///
/// ...
///
/// let localSBView = SendBirdVideoView(frame: self.localVideoView?.frame ?? CGRect.zero)
/// let remoteSBView = SendBirdVideoView(frame: self.remoteVideoView?.frame ?? CGRect.zero)
///
/// self.call.updateLocalVideoView(localSBView)
/// self.call.updateRemoteVideoView(remoteSBView)
///
/// // When you make a call or accept an incoming call.
/// let callOptions = CallOptions(
///                   isAudioEnabled = true,
///                   isVideoEnabled = true,
///                   localVideoView: localSBVideoView
///                   remoteVideoView: remoteSBVideoView)
///
/// // Or when update local / remote view
/// self.call.updateLocalVideoView(localSBView)
/// self.call.updateRemoteVideoView(remoteSBView)
///
///
/// \endcode
SWIFT_CLASS_NAMED("SendBirdVideoView")
@interface SBCVideoView : RTCEAGLVideoView
- (nonnull instancetype)initWithFrame:(CGRect)frame shader:(id <RTCVideoViewShading> _Nonnull)shader OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder shader:(id <RTCVideoViewShading> _Nonnull)shader OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
