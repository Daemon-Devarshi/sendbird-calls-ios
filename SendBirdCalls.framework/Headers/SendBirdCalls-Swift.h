#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import PushKit;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SendBirdCalls",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS_NAMED("AuthenticateParams")
@interface SBCAuthenticateParams : NSObject
@property (nonatomic, copy) NSString * _Nonnull userId;
@property (nonatomic, copy) NSString * _Nullable accessToken;
@property (nonatomic, readonly, copy) NSData * _Nullable pushToken;
@property (nonatomic, readonly) BOOL unique;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId accessToken:(NSString * _Nullable)accessToken pushToken:(NSData * _Nullable)pushToken unique:(BOOL)unique OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId accessToken:(NSString * _Nullable)accessToken;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId pushToken:(NSData * _Nullable)pushToken unique:(BOOL)unique;
- (void)setPushWithToken:(NSData * _Nullable)token withUniqueness:(BOOL)unique;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


///
SWIFT_CLASS_NAMED("CallOptions")
@interface SBCCallOptions : NSObject
/// If <code>false</code>, the call is for audio only.
@property (nonatomic) BOOL isVideoCall;
@property (nonatomic) BOOL isAudioEnabled;
- (nonnull instancetype)initWithIsVideoCall:(BOOL)isVideoCall isAudioEnabled:(BOOL)isAudioEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBCDirectCallUser;
enum SBCDirectCallUserRole : NSInteger;
enum SBCEndResult : NSInteger;
@protocol SBCDirectCallDelegate;

/// This class describes direct call.  It has an identifier as an unique key.
SWIFT_CLASS_NAMED("DirectCall")
@interface SBCDirectCall : NSObject
/// Call Id of the Call
@property (nonatomic, readonly, copy) NSString * _Nonnull callId;
/// The caller’s object. It can be used for showing the caller’s name on the screen of the callee.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable caller;
/// The callee’s object.  It can be used for showing the callee’s name on the screen of the caller.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable callee;
/// The DirectCallUser of remote user of the call.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable remoteUser;
/// The DirectCallUser of local user of the call.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable localUser;
/// The role of the current user.  This property has <code>UserRole.none</code>as an initial value.
@property (nonatomic, readonly) enum SBCDirectCallUserRole myRole;
/// End Result of the ended call
@property (nonatomic, readonly) enum SBCEndResult endResult;
/// Boolean value of whether the call is ended
@property (nonatomic, readonly) BOOL isEnded;
/// The start time of call. Int64 of miliseconds.
/// important:
///
/// Returns 0 if the call hasn’t started.
@property (nonatomic, readonly) int64_t startedAt;
/// The ended time of call. Int64 of miliseconds.
/// important:
///
/// Returns 0 if the call hasn’t ended.
@property (nonatomic, readonly) int64_t endedAt;
/// The duration of the call. Int64 of miliseconds.
/// important:
///
/// Returns 0 if the call hasn’t started.
@property (nonatomic, readonly) int64_t duration;
/// The muted status of the remote user.
@property (nonatomic, readonly) BOOL isRemoteAudioEnabled;
/// The muted status of the local user.
@property (nonatomic, readonly) BOOL isLocalAudioEnabled;
/// Is the call Video Call.
@property (nonatomic, readonly) BOOL isVideoCall;
@property (nonatomic, weak) id <SBCDirectCallDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <h2>User Role of Direct Call</h2>
typedef SWIFT_ENUM_NAMED(NSInteger, SBCDirectCallUserRole, "UserRole", closed) {
  SBCDirectCallUserRoleCaller = 0,
  SBCDirectCallUserRoleCallee = 1,
};


@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// The UUID form of callId. Useful when dealing with CallKit.
@property (nonatomic, readonly, copy) NSUUID * _Nullable callUUID;
@end




@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// Requests <code>ACCEPT</code> to <em>SendBird</em> server and sets up Turn credential. This method is called when the callee accepts incoming call.
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     callOptions: Set up the call that you’re receiving. Cannot be empty
///   </li>
/// </ul>
- (void)acceptWithCallOptions:(SBCCallOptions * _Nonnull)callOptions;
/// Requests <code>End</code> to <em>SendBird</em> server and sets up ended call’s information. This method is called when the callee ends / declines / cancels call.
- (void)end;
/// Mutes the audio of local user
- (void)muteMicrophone;
/// Unmute the audio of local user
- (void)unmuteMicrophone;
@end








SWIFT_PROTOCOL_NAMED("DirectCallDelegate")
@protocol SBCDirectCallDelegate
@optional
- (void)didEstablish:(SBCDirectCall * _Nonnull)call;
- (void)didConnect:(SBCDirectCall * _Nonnull)call;
- (void)didRemoteAudioSettingsChange:(SBCDirectCall * _Nonnull)call;
- (void)didEnd:(SBCDirectCall * _Nonnull)call;
@end


/// Direct Call
SWIFT_CLASS_NAMED("DirectCallLog")
@interface SBCDirectCallLog : NSObject
/// Call Id of the Call
@property (nonatomic, readonly, copy) NSString * _Nonnull callId;
/// The started time of the Call. Int64 of miliseconds.
@property (nonatomic, readonly) int64_t startedAt;
/// The ended time of the Call. Int64 of miliseconds.
@property (nonatomic, readonly) int64_t endedAt;
/// The duration of the Call. Int64 of miliseconds.
@property (nonatomic, readonly) int64_t duration;
/// The caller of the call.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable caller;
/// The callee of the call.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable callee;
/// The end result of the call.
@property (nonatomic, readonly) enum SBCEndResult endResult;
/// The role of the current user in the call.
@property (nonatomic, readonly) enum SBCDirectCallUserRole myRole;
@property (nonatomic, readonly) BOOL isVideoCall;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum UserRoleFilter : NSInteger;
@class NSArray;
@class SBCError;

/// Query to fetch DirectCallLogs
SWIFT_CLASS_NAMED("DirectCallLogListQuery")
@interface SBCDirectCallLogListQuery : NSObject
@property (nonatomic, readonly) BOOL isLoading;
@property (nonatomic, readonly) BOOL hasNext;
@property (nonatomic, readonly) enum UserRoleFilter myRole;
@property (nonatomic, readonly, strong) NSArray * _Nonnull endResultsArray;
@property (nonatomic, readonly) int32_t limit;
- (void)nextWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBCDirectCallLog *> * _Nullable, SBCError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, UserRoleFilter, closed) {
  UserRoleFilterCaller = 0,
  UserRoleFilterCallee = 1,
  UserRoleFilterAll = 2,
};


SWIFT_CLASS_NAMED("Params")
@interface SBCDirectCallLogListQueryParams : NSObject
@property (nonatomic) enum UserRoleFilter myRole;
@property (nonatomic, readonly, strong) NSArray * _Nonnull endResultsArray;
- (void)addWithEndResult:(enum SBCEndResult)endResult;
- (void)removeWithEndResult:(enum SBCEndResult)endResult;
@property (nonatomic) int32_t limit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents a caller and a callee
SWIFT_CLASS_NAMED("User")
@interface SBCUser : NSObject
/// The user ID of the call user.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// (Optional value) The nickname of the call user.
@property (nonatomic, readonly, copy) NSString * _Nullable nickname;
/// (Optional value) The profile image URL of the call user.
@property (nonatomic, readonly, copy) NSString * _Nullable profileURL;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@property (nonatomic, readonly) BOOL isActive;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DirectCallUser")
@interface SBCDirectCallUser : SBCUser
@property (nonatomic, readonly) enum SBCDirectCallUserRole role;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SBCEndResult, "EndResult", closed) {
  SBCEndResultCompleted = 0,
  SBCEndResultCanceled = 1,
  SBCEndResultDeclined = 2,
  SBCEndResultOtherDeviceAccepted = 3,
  SBCEndResultTimedOut = 4,
  SBCEndResultConnectionLost = 5,
  SBCEndResultNoAnswer = 6,
  SBCEndResultDialFailed = 7,
  SBCEndResultAcceptFailed = 8,
  SBCEndResultUnknown = 9,
};

@class NSCoder;

SWIFT_CLASS("_TtC13SendBirdCalls8SBCError")
@interface SBCError : NSError
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SBCErrorCode, "ErrorCode", closed) {
  SBCErrorCodeDialCanceled = 1800100,
  SBCErrorCodeDialMyself = 1800101,
  SBCErrorCodeHttpRequestFailed = 1800200,
  SBCErrorCodeWsResponseTimeout = 1800203,
  SBCErrorCodeWsConnectionLost = 1800204,
  SBCErrorCodeInvalidResponse = 1800205,
  SBCErrorCodeQueryInProgress = 1800206,
  SBCErrorCodeInternalServer = 1800207,
  SBCErrorCodeMalformedData = 1800208,
  SBCErrorCodeInvalidParameter = 1800300,
  SBCErrorCodeInvalidParameterType = 1800301,
  SBCErrorCodeNotInitializedSendBirdCall = 1800302,
  SBCErrorCodeNotAuthenticated = 1800303,
};


SWIFT_PROTOCOL("_TtP13SendBirdCalls14SBCLogReceiver_")
@protocol SBCLogReceiver
- (void)logMessage:(NSString * _Nonnull)message;
@end


SWIFT_CLASS("_TtC13SendBirdCalls9SBCLogger")
@interface SBCLogger : NSObject
+ (void)addWithReceiver:(id <SBCLogReceiver> _Nonnull)receiver;
+ (void)removeWithReceiver:(id <SBCLogReceiver> _Nonnull)receiver;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol SBCSendBirdCallDelegate;
@class PKPushRegistry;
@class PKPushPayload;

SWIFT_CLASS_NAMED("SendBirdCall")
@interface SBCSendBirdCall : NSObject
/// The app id of your SendBird app
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable appId;)
+ (NSString * _Nullable)appId SWIFT_WARN_UNUSED_RESULT;
+ (void)setAppId:(NSString * _Nullable)newValue;
/// Configures the appId of your SendBird App.
/// App Id <em>must</em> be configured prior to using any SendBirdCall functions
/// \param appId String of your app id from your dashboard
///
+ (BOOL)configureWithAppId:(NSString * _Nonnull)appId SWIFT_WARN_UNUSED_RESULT;
/// SendBird SDK Version
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Specifies the queue that you want to use for callbacks and delegate methods
/// \param queue DispatchQueue that will be used when calling callbacks and delegates internally
///
+ (void)executeOnQueue:(dispatch_queue_t _Nonnull)queue;
/// Adds delegates to SendBirdCall for Call status changes
/// \param delegate SendBirdCallDelegate that listens to SendBirdCall events
///
/// \param identifier Identifier for the specific delegate
///
+ (void)addDelegate:(id <SBCSendBirdCallDelegate> _Nonnull)delegate identifier:(NSString * _Nonnull)identifier;
/// Remove delegate for the given identifier
/// \param identifier String identifier for the delegate. If SendBirdCall doesn’t have the given identifier, it will be ignored.
///
+ (void)removeDelegateWithIdentifier:(NSString * _Nonnull)identifier;
/// Removes all delegate for SendBirdCall events
+ (void)removeAllDelegates;
/// Returns call for call id
/// \param forCallId String call id.
///
///
/// returns:
///
/// An optional Direct Call with corresponding call id.
+ (SBCDirectCall * _Nullable)getCallForCallId:(NSString * _Nonnull)callId SWIFT_WARN_UNUSED_RESULT;
/// Returns the currently authenticated user
///
/// returns:
///
/// User that is currently authenticated. Returns nil if no user exists
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBCUser * _Nullable currentUser;)
+ (SBCUser * _Nullable)currentUser SWIFT_WARN_UNUSED_RESULT;
/// Authenticates user with user ID and Access Token that you generated at SendBird Dashboard.
/// \param params <code>AuthenticateParams</code> that contains User Id, Access Token, Push Token, and Unique
///
/// \param completionHandler The handler to call when the authenication is complete.
///
+ (void)authenticateWithParams:(SBCAuthenticateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBCUser * _Nullable, SBCError * _Nullable))completionHandler;
/// Deauthenticates current user and clears remaining processes
/// \param pushToken Data of Push Token. Nullable. Doesn’t remove push token if the token is nil
///
/// \param completionHandler Error Handler to be called after deauthenticate process is finished
///
+ (void)deauthenticateWithPushToken:(NSData * _Nullable)pushToken completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Calls to user(callee) directly.
/// \param calleeId The callee’s user ID
///
/// \param callOptions It has <code>CallOptions()</code> as a default value.
///
///
/// returns:
/// <code>DirectCall</code> object
+ (SBCDirectCall * _Nullable)dialTo:(NSString * _Nonnull)calleeId callOptions:(SBCCallOptions * _Nonnull)callOptions completionHandler:(void (^ _Nonnull)(SBCDirectCall * _Nullable, SBCError * _Nullable))completionHandler;
+ (void)pushRegistry:(PKPushRegistry * _Nonnull)registry didReceiveIncomingPushWith:(PKPushPayload * _Nonnull)payload for:(PKPushType _Nonnull)type completionHandler:(void (^ _Nullable)(NSUUID * _Nullable))completionHandler;
+ (void)registerWithPushToken:(NSData * _Nullable)pushToken unique:(BOOL)unique completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Unregisters a push token for current user.
/// \param pushToken Optional Data for the push token that you want to unregister
///
/// \param completionHandler ErrorHandler that returns callback with error.
///
+ (void)unregisterWithPushToken:(NSData * _Nullable)pushToken completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Unregister all push token registered to the current user
/// \param completionHandler ErrorHandler that returns callback with error
///
+ (void)unregisterAllPushTokensWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Creates a Direct Call Log LIst Query from given params
/// \param params DirectCallLogListQuery Params with options for creating query.
///
///
/// returns:
///
/// DirectCallLogListQuery: returns optional query object
+ (SBCDirectCallLogListQuery * _Nullable)createDirectCallLogListQueryWith:(SBCDirectCallLogListQueryParams * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBCSendBirdCall (SWIFT_EXTENSION(SendBirdCalls))
+ (SBCDirectCall * _Nullable)getCallForUUID:(NSUUID * _Nonnull)callUUID SWIFT_WARN_UNUSED_RESULT;
@end


/// Delegate for SendBirdCall
SWIFT_PROTOCOL_NAMED("SendBirdCallDelegate")
@protocol SBCSendBirdCallDelegate
/// A callback when the current user received a start call from the caller.
/// important:
/// <code>SendBirdCall.dial()</code> method allows you to create new <code>DirectCall</code> object.
/// \param call <code>DirectCall</code> object,
///
- (void)didEnterRinging:(SBCDirectCall * _Nonnull)call;
@end




#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import PushKit;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SendBirdCalls",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS_NAMED("AuthenticateParams")
@interface SBCAuthenticateParams : NSObject
@property (nonatomic, copy) NSString * _Nonnull userId;
@property (nonatomic, copy) NSString * _Nullable accessToken;
@property (nonatomic, readonly, copy) NSData * _Nullable pushToken;
@property (nonatomic, readonly) BOOL unique;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId accessToken:(NSString * _Nullable)accessToken pushToken:(NSData * _Nullable)pushToken unique:(BOOL)unique OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId accessToken:(NSString * _Nullable)accessToken;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId pushToken:(NSData * _Nullable)pushToken unique:(BOOL)unique;
- (void)setPushWithToken:(NSData * _Nullable)token withUniqueness:(BOOL)unique;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


///
SWIFT_CLASS_NAMED("CallOptions")
@interface SBCCallOptions : NSObject
/// If <code>false</code>, the call is for audio only.
@property (nonatomic) BOOL isVideoCall;
@property (nonatomic) BOOL isAudioEnabled;
- (nonnull instancetype)initWithIsVideoCall:(BOOL)isVideoCall isAudioEnabled:(BOOL)isAudioEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBCDirectCallUser;
enum SBCDirectCallUserRole : NSInteger;
enum SBCEndResult : NSInteger;
@protocol SBCDirectCallDelegate;

/// This class describes direct call.  It has an identifier as an unique key.
SWIFT_CLASS_NAMED("DirectCall")
@interface SBCDirectCall : NSObject
/// Call Id of the Call
@property (nonatomic, readonly, copy) NSString * _Nonnull callId;
/// The caller’s object. It can be used for showing the caller’s name on the screen of the callee.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable caller;
/// The callee’s object.  It can be used for showing the callee’s name on the screen of the caller.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable callee;
/// The DirectCallUser of remote user of the call.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable remoteUser;
/// The DirectCallUser of local user of the call.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable localUser;
/// The role of the current user.  This property has <code>UserRole.none</code>as an initial value.
@property (nonatomic, readonly) enum SBCDirectCallUserRole myRole;
/// End Result of the ended call
@property (nonatomic, readonly) enum SBCEndResult endResult;
/// Boolean value of whether the call is ended
@property (nonatomic, readonly) BOOL isEnded;
/// The start time of call. Int64 of miliseconds.
/// important:
///
/// Returns 0 if the call hasn’t started.
@property (nonatomic, readonly) int64_t startedAt;
/// The ended time of call. Int64 of miliseconds.
/// important:
///
/// Returns 0 if the call hasn’t ended.
@property (nonatomic, readonly) int64_t endedAt;
/// The duration of the call. Int64 of miliseconds.
/// important:
///
/// Returns 0 if the call hasn’t started.
@property (nonatomic, readonly) int64_t duration;
/// The muted status of the remote user.
@property (nonatomic, readonly) BOOL isRemoteAudioEnabled;
/// The muted status of the local user.
@property (nonatomic, readonly) BOOL isLocalAudioEnabled;
/// Is the call Video Call.
@property (nonatomic, readonly) BOOL isVideoCall;
@property (nonatomic, weak) id <SBCDirectCallDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <h2>User Role of Direct Call</h2>
typedef SWIFT_ENUM_NAMED(NSInteger, SBCDirectCallUserRole, "UserRole", closed) {
  SBCDirectCallUserRoleCaller = 0,
  SBCDirectCallUserRoleCallee = 1,
};


@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// The UUID form of callId. Useful when dealing with CallKit.
@property (nonatomic, readonly, copy) NSUUID * _Nullable callUUID;
@end




@interface SBCDirectCall (SWIFT_EXTENSION(SendBirdCalls))
/// Requests <code>ACCEPT</code> to <em>SendBird</em> server and sets up Turn credential. This method is called when the callee accepts incoming call.
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     callOptions: Set up the call that you’re receiving. Cannot be empty
///   </li>
/// </ul>
- (void)acceptWithCallOptions:(SBCCallOptions * _Nonnull)callOptions;
/// Requests <code>End</code> to <em>SendBird</em> server and sets up ended call’s information. This method is called when the callee ends / declines / cancels call.
- (void)end;
/// Mutes the audio of local user
- (void)muteMicrophone;
/// Unmute the audio of local user
- (void)unmuteMicrophone;
@end








SWIFT_PROTOCOL_NAMED("DirectCallDelegate")
@protocol SBCDirectCallDelegate
@optional
- (void)didEstablish:(SBCDirectCall * _Nonnull)call;
- (void)didConnect:(SBCDirectCall * _Nonnull)call;
- (void)didRemoteAudioSettingsChange:(SBCDirectCall * _Nonnull)call;
- (void)didEnd:(SBCDirectCall * _Nonnull)call;
@end


/// Direct Call
SWIFT_CLASS_NAMED("DirectCallLog")
@interface SBCDirectCallLog : NSObject
/// Call Id of the Call
@property (nonatomic, readonly, copy) NSString * _Nonnull callId;
/// The started time of the Call. Int64 of miliseconds.
@property (nonatomic, readonly) int64_t startedAt;
/// The ended time of the Call. Int64 of miliseconds.
@property (nonatomic, readonly) int64_t endedAt;
/// The duration of the Call. Int64 of miliseconds.
@property (nonatomic, readonly) int64_t duration;
/// The caller of the call.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable caller;
/// The callee of the call.
@property (nonatomic, readonly, strong) SBCDirectCallUser * _Nullable callee;
/// The end result of the call.
@property (nonatomic, readonly) enum SBCEndResult endResult;
/// The role of the current user in the call.
@property (nonatomic, readonly) enum SBCDirectCallUserRole myRole;
@property (nonatomic, readonly) BOOL isVideoCall;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum UserRoleFilter : NSInteger;
@class NSArray;
@class SBCError;

/// Query to fetch DirectCallLogs
SWIFT_CLASS_NAMED("DirectCallLogListQuery")
@interface SBCDirectCallLogListQuery : NSObject
@property (nonatomic, readonly) BOOL isLoading;
@property (nonatomic, readonly) BOOL hasNext;
@property (nonatomic, readonly) enum UserRoleFilter myRole;
@property (nonatomic, readonly, strong) NSArray * _Nonnull endResultsArray;
@property (nonatomic, readonly) int32_t limit;
- (void)nextWithCompletionHandler:(void (^ _Nonnull)(NSArray<SBCDirectCallLog *> * _Nullable, SBCError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, UserRoleFilter, closed) {
  UserRoleFilterCaller = 0,
  UserRoleFilterCallee = 1,
  UserRoleFilterAll = 2,
};


SWIFT_CLASS_NAMED("Params")
@interface SBCDirectCallLogListQueryParams : NSObject
@property (nonatomic) enum UserRoleFilter myRole;
@property (nonatomic, readonly, strong) NSArray * _Nonnull endResultsArray;
- (void)addWithEndResult:(enum SBCEndResult)endResult;
- (void)removeWithEndResult:(enum SBCEndResult)endResult;
@property (nonatomic) int32_t limit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents a caller and a callee
SWIFT_CLASS_NAMED("User")
@interface SBCUser : NSObject
/// The user ID of the call user.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// (Optional value) The nickname of the call user.
@property (nonatomic, readonly, copy) NSString * _Nullable nickname;
/// (Optional value) The profile image URL of the call user.
@property (nonatomic, readonly, copy) NSString * _Nullable profileURL;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@property (nonatomic, readonly) BOOL isActive;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DirectCallUser")
@interface SBCDirectCallUser : SBCUser
@property (nonatomic, readonly) enum SBCDirectCallUserRole role;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SBCEndResult, "EndResult", closed) {
  SBCEndResultCompleted = 0,
  SBCEndResultCanceled = 1,
  SBCEndResultDeclined = 2,
  SBCEndResultOtherDeviceAccepted = 3,
  SBCEndResultTimedOut = 4,
  SBCEndResultConnectionLost = 5,
  SBCEndResultNoAnswer = 6,
  SBCEndResultDialFailed = 7,
  SBCEndResultAcceptFailed = 8,
  SBCEndResultUnknown = 9,
};

@class NSCoder;

SWIFT_CLASS("_TtC13SendBirdCalls8SBCError")
@interface SBCError : NSError
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SBCErrorCode, "ErrorCode", closed) {
  SBCErrorCodeDialCanceled = 1800100,
  SBCErrorCodeDialMyself = 1800101,
  SBCErrorCodeHttpRequestFailed = 1800200,
  SBCErrorCodeWsResponseTimeout = 1800203,
  SBCErrorCodeWsConnectionLost = 1800204,
  SBCErrorCodeInvalidResponse = 1800205,
  SBCErrorCodeQueryInProgress = 1800206,
  SBCErrorCodeInternalServer = 1800207,
  SBCErrorCodeMalformedData = 1800208,
  SBCErrorCodeInvalidParameter = 1800300,
  SBCErrorCodeInvalidParameterType = 1800301,
  SBCErrorCodeNotInitializedSendBirdCall = 1800302,
  SBCErrorCodeNotAuthenticated = 1800303,
};


SWIFT_PROTOCOL("_TtP13SendBirdCalls14SBCLogReceiver_")
@protocol SBCLogReceiver
- (void)logMessage:(NSString * _Nonnull)message;
@end


SWIFT_CLASS("_TtC13SendBirdCalls9SBCLogger")
@interface SBCLogger : NSObject
+ (void)addWithReceiver:(id <SBCLogReceiver> _Nonnull)receiver;
+ (void)removeWithReceiver:(id <SBCLogReceiver> _Nonnull)receiver;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol SBCSendBirdCallDelegate;
@class PKPushRegistry;
@class PKPushPayload;

SWIFT_CLASS_NAMED("SendBirdCall")
@interface SBCSendBirdCall : NSObject
/// The app id of your SendBird app
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable appId;)
+ (NSString * _Nullable)appId SWIFT_WARN_UNUSED_RESULT;
+ (void)setAppId:(NSString * _Nullable)newValue;
/// Configures the appId of your SendBird App.
/// App Id <em>must</em> be configured prior to using any SendBirdCall functions
/// \param appId String of your app id from your dashboard
///
+ (BOOL)configureWithAppId:(NSString * _Nonnull)appId SWIFT_WARN_UNUSED_RESULT;
/// SendBird SDK Version
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Specifies the queue that you want to use for callbacks and delegate methods
/// \param queue DispatchQueue that will be used when calling callbacks and delegates internally
///
+ (void)executeOnQueue:(dispatch_queue_t _Nonnull)queue;
/// Adds delegates to SendBirdCall for Call status changes
/// \param delegate SendBirdCallDelegate that listens to SendBirdCall events
///
/// \param identifier Identifier for the specific delegate
///
+ (void)addDelegate:(id <SBCSendBirdCallDelegate> _Nonnull)delegate identifier:(NSString * _Nonnull)identifier;
/// Remove delegate for the given identifier
/// \param identifier String identifier for the delegate. If SendBirdCall doesn’t have the given identifier, it will be ignored.
///
+ (void)removeDelegateWithIdentifier:(NSString * _Nonnull)identifier;
/// Removes all delegate for SendBirdCall events
+ (void)removeAllDelegates;
/// Returns call for call id
/// \param forCallId String call id.
///
///
/// returns:
///
/// An optional Direct Call with corresponding call id.
+ (SBCDirectCall * _Nullable)getCallForCallId:(NSString * _Nonnull)callId SWIFT_WARN_UNUSED_RESULT;
/// Returns the currently authenticated user
///
/// returns:
///
/// User that is currently authenticated. Returns nil if no user exists
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBCUser * _Nullable currentUser;)
+ (SBCUser * _Nullable)currentUser SWIFT_WARN_UNUSED_RESULT;
/// Authenticates user with user ID and Access Token that you generated at SendBird Dashboard.
/// \param params <code>AuthenticateParams</code> that contains User Id, Access Token, Push Token, and Unique
///
/// \param completionHandler The handler to call when the authenication is complete.
///
+ (void)authenticateWithParams:(SBCAuthenticateParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(SBCUser * _Nullable, SBCError * _Nullable))completionHandler;
/// Deauthenticates current user and clears remaining processes
/// \param pushToken Data of Push Token. Nullable. Doesn’t remove push token if the token is nil
///
/// \param completionHandler Error Handler to be called after deauthenticate process is finished
///
+ (void)deauthenticateWithPushToken:(NSData * _Nullable)pushToken completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Calls to user(callee) directly.
/// \param calleeId The callee’s user ID
///
/// \param callOptions It has <code>CallOptions()</code> as a default value.
///
///
/// returns:
/// <code>DirectCall</code> object
+ (SBCDirectCall * _Nullable)dialTo:(NSString * _Nonnull)calleeId callOptions:(SBCCallOptions * _Nonnull)callOptions completionHandler:(void (^ _Nonnull)(SBCDirectCall * _Nullable, SBCError * _Nullable))completionHandler;
+ (void)pushRegistry:(PKPushRegistry * _Nonnull)registry didReceiveIncomingPushWith:(PKPushPayload * _Nonnull)payload for:(PKPushType _Nonnull)type completionHandler:(void (^ _Nullable)(NSUUID * _Nullable))completionHandler;
+ (void)registerWithPushToken:(NSData * _Nullable)pushToken unique:(BOOL)unique completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Unregisters a push token for current user.
/// \param pushToken Optional Data for the push token that you want to unregister
///
/// \param completionHandler ErrorHandler that returns callback with error.
///
+ (void)unregisterWithPushToken:(NSData * _Nullable)pushToken completionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Unregister all push token registered to the current user
/// \param completionHandler ErrorHandler that returns callback with error
///
+ (void)unregisterAllPushTokensWithCompletionHandler:(void (^ _Nullable)(SBCError * _Nullable))completionHandler;
/// Creates a Direct Call Log LIst Query from given params
/// \param params DirectCallLogListQuery Params with options for creating query.
///
///
/// returns:
///
/// DirectCallLogListQuery: returns optional query object
+ (SBCDirectCallLogListQuery * _Nullable)createDirectCallLogListQueryWith:(SBCDirectCallLogListQueryParams * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBCSendBirdCall (SWIFT_EXTENSION(SendBirdCalls))
+ (SBCDirectCall * _Nullable)getCallForUUID:(NSUUID * _Nonnull)callUUID SWIFT_WARN_UNUSED_RESULT;
@end


/// Delegate for SendBirdCall
SWIFT_PROTOCOL_NAMED("SendBirdCallDelegate")
@protocol SBCSendBirdCallDelegate
/// A callback when the current user received a start call from the caller.
/// important:
/// <code>SendBirdCall.dial()</code> method allows you to create new <code>DirectCall</code> object.
/// \param call <code>DirectCall</code> object,
///
- (void)didEnterRinging:(SBCDirectCall * _Nonnull)call;
@end




#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
